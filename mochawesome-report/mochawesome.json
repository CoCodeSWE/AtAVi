{
  "stats": {
    "suites": 136,
    "tests": 181,
    "passes": 176,
    "pending": 0,
    "failures": 5,
    "start": "2017-05-06T21:30:23.439Z",
    "end": "2017-05-06T21:30:34.231Z",
    "duration": 10792,
    "testsRegistered": 181,
    "passPercent": 97.2,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "AdministrationWebhookService",
            "suites": [
              {
                "title": "webhook",
                "suites": [],
                "tests": [
                  {
                    "title": "La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
                    "fullTitle": "AdministrationWebhookService webhook La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "jwt.verify.returns(1);\nservice.webhook(ev, { succeed: function(res) { expect(res.statusCode).to.equal(200); done(); }});",
                    "err": {
                      "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:72:17)\n"
                    },
                    "isRoot": false,
                    "uuid": "2d5a2027-bd8a-4eea-b514-7611333dc194",
                    "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
                    "skipped": false
                  },
                  {
                    "title": "La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
                    "fullTitle": "AdministrationWebhookService webhook La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "jwt.verify.throws();\nservice.webhook(ev, { succeed: function(res)\n{\n  let body = JSON.parse(res.body);\n  expect(body.data._status).to.equal(403);\n  done();\n}});",
                    "err": {
                      "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:78:17)\n"
                    },
                    "isRoot": false,
                    "uuid": "47923f23-8044-4ac7-84a5-5aa854f730e5",
                    "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_AdministrationWebhookService.js",
                "uuid": "16aae3bd-d389-4ce8-be37-12bb842af39e",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AdministrationWebhookService.js",
                "passes": [],
                "failures": [
                  {
                    "title": "La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
                    "fullTitle": "AdministrationWebhookService webhook La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "jwt.verify.returns(1);\nservice.webhook(ev, { succeed: function(res) { expect(res.statusCode).to.equal(200); done(); }});",
                    "err": {
                      "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:72:17)\n"
                    },
                    "isRoot": false,
                    "uuid": "2d5a2027-bd8a-4eea-b514-7611333dc194",
                    "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
                    "skipped": false
                  },
                  {
                    "title": "La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
                    "fullTitle": "AdministrationWebhookService webhook La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "jwt.verify.throws();\nservice.webhook(ev, { succeed: function(res)\n{\n  let body = JSON.parse(res.body);\n  expect(body.data._status).to.equal(403);\n  done();\n}});",
                    "err": {
                      "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:78:17)\n"
                    },
                    "isRoot": false,
                    "uuid": "47923f23-8044-4ac7-84a5-5aa854f730e5",
                    "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
                    "skipped": false
                  }
                ],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 0,
                "totalFailures": 2,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": true,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_AdministrationWebhookService.js",
            "uuid": "f4f24c71-0f19-4023-b456-b4c762416049",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AdministrationWebhookService.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_AdministrationWebhookService.js",
        "uuid": "e906f7b2-628e-4f0c-b327-79ef39f70dbd",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AdministrationWebhookService.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Agents",
            "suites": [
              {
                "title": "AgentsDAODynamoDB",
                "suites": [
                  {
                    "title": "addAgent",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB addAgent Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode:400, msg:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "323df3b3-ed51-4e2a-9304-88849a3d0e5b",
                        "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB addAgent Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "06edb568-7970-48b4-a45c-976077ef2d71",
                        "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
                    "uuid": "9594918e-0827-4c03-b74d-20002a26911a",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB addAgent Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode:400, msg:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "323df3b3-ed51-4e2a-9304-88849a3d0e5b",
                        "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB addAgent Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "06edb568-7970-48b4-a45c-976077ef2d71",
                        "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 5,
                    "rootEmpty": false
                  },
                  {
                    "title": "getAgent",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB getAgent Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7f19c384-de7b-4c99-abbf-36b6c8e8234d",
                        "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB getAgent Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = agents.getAgent('mock_name');\nobservable.subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield(null, {Item: {mock_agent}});\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a9f94659-f673-41e2-8a02-a82ddcf1ed14",
                        "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
                    "uuid": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB getAgent Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7f19c384-de7b-4c99-abbf-36b6c8e8234d",
                        "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB getAgent Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = agents.getAgent('mock_name');\nobservable.subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield(null, {Item: {mock_agent}});\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a9f94659-f673-41e2-8a02-a82ddcf1ed14",
                        "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "getAgentList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB getAgentList Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '2'});\ndynamo_client.scan.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4d1d717f-fcbe-478e-a381-5b53601ada0b",
                        "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB getAgentList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent]}); // Ultimo elemento da ottenere\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e08ca80c-2ca7-47d1-b513-6971eabf39b7",
                        "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
                    "uuid": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB getAgentList Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '2'});\ndynamo_client.scan.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4d1d717f-fcbe-478e-a381-5b53601ada0b",
                        "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB getAgentList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent]}); // Ultimo elemento da ottenere\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e08ca80c-2ca7-47d1-b513-6971eabf39b7",
                        "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 5,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeAgent",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB removeAgent Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, msg:\"error removing rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d298e2be-44aa-4561-aca8-d83922a6ef69",
                        "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB removeAgent Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, msg:\"success\"});\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92dabb8f-ebe5-4e8d-852c-a00784491d2e",
                        "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
                    "uuid": "ced7a107-e669-44c0-9209-fecc09ded95d",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB removeAgent Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, msg:\"error removing rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d298e2be-44aa-4561-aca8-d83922a6ef69",
                        "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB removeAgent Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, msg:\"success\"});\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92dabb8f-ebe5-4e8d-852c-a00784491d2e",
                        "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateAgent",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB updateAgent Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, msg:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef631d93-7562-4059-94e4-4388897b154d",
                        "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB updateAgent Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, mock_agent);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7b7d4c3-fefb-47df-95ef-58007d409a92",
                        "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
                    "uuid": "e0d8e836-0862-4359-9b37-851ca825eb03",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "AgentsDAODynamoDB updateAgent Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, msg:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef631d93-7562-4059-94e4-4388897b154d",
                        "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "AgentsDAODynamoDB updateAgent Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, mock_agent);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7b7d4c3-fefb-47df-95ef-58007d409a92",
                        "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 6,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
                "uuid": "fa933d45-272e-41db-9841-c773929d0d3f",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
            "uuid": "86051ac0-00d6-4913-b99d-4bef7ab6bebf",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_AgentsDAODynamoDB.js",
        "uuid": "4a8a2ce9-6dbc-4ad4-8ab2-e595db14646f",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_AgentsDAODynamoDB.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "VirtualAssistant",
            "suites": [
              {
                "title": "ApiAiVAAdapter",
                "suites": [
                  {
                    "title": "query",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
                        "fullTitle": "ApiAiVAAdapter query Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "RequestPromise.returns(Promise.resolve(response));\nadapter.query(query).then(function(data)\n\t\t\t\t\t{\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "29b5ccf9-c97a-42bb-8779-81157c19139a",
                        "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
                        "fullTitle": "ApiAiVAAdapter query Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "//sarebbero da aggiungere i singoli casi (status code, data.statusCode, ecc)\nRequestPromise.returns(Promise.resolve(error));\nadapter.query(query).then(done).catch(function(err){done();});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e358c25-16ae-48bd-a1a0-b66dc7bd35ee",
                        "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_ApiAiVAAdapter.js",
                    "uuid": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ApiAiVAAdapter.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
                        "fullTitle": "ApiAiVAAdapter query Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "RequestPromise.returns(Promise.resolve(response));\nadapter.query(query).then(function(data)\n\t\t\t\t\t{\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "29b5ccf9-c97a-42bb-8779-81157c19139a",
                        "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
                        "fullTitle": "ApiAiVAAdapter query Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "//sarebbero da aggiungere i singoli casi (status code, data.statusCode, ecc)\nRequestPromise.returns(Promise.resolve(error));\nadapter.query(query).then(done).catch(function(err){done();});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e358c25-16ae-48bd-a1a0-b66dc7bd35ee",
                        "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 6,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ApiAiVAAdapter.js",
                "uuid": "32019915-d1cf-4495-87a0-895c1b46e8de",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ApiAiVAAdapter.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_ApiAiVAAdapter.js",
            "uuid": "49aaaf08-962c-436f-bb6c-35cf91cc3051",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ApiAiVAAdapter.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_ApiAiVAAdapter.js",
        "uuid": "14e3898d-c506-44de-88ce-c4bc617f7ddf",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ApiAiVAAdapter.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Conversations",
            "suites": [
              {
                "title": "ConversationsDAODynamoDB",
                "suites": [
                  {
                    "title": "addConversation",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB addConversation Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({ statusCode : 400, message : \"Requested resource not found\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5668bdfd-c977-4457-8117-551210a0aeac",
                        "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
                        "fullTitle": "ConversationsDAODynamoDB addConversation Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7a38e270-a340-4edf-9fa6-9f62384fce9c",
                        "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "uuid": "6559be4c-fb2f-467f-a445-405ec898518e",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB addConversation Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({ statusCode : 400, message : \"Requested resource not found\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5668bdfd-c977-4457-8117-551210a0aeac",
                        "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
                        "fullTitle": "ConversationsDAODynamoDB addConversation Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7a38e270-a340-4edf-9fa6-9f62384fce9c",
                        "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "addMessage",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB addMessage Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield({ statusCode : 500, message : \"error adding message\" });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "368ca2cb-2c11-46ce-914b-22278d5221c2",
                        "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "ConversationsDAODynamoDB addMessage Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield(null,{});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bc373be5-705e-46cc-8c7a-b0409ac0dac0",
                        "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "uuid": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB addMessage Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield({ statusCode : 500, message : \"error adding message\" });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "368ca2cb-2c11-46ce-914b-22278d5221c2",
                        "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "ConversationsDAODynamoDB addMessage Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield(null,{});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bc373be5-705e-46cc-8c7a-b0409ac0dac0",
                        "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "getConversation",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB getConversation Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield({ statusCode  :500, message : \"error downloading conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f3caf75-bc54-4edc-9b6f-8ff2f19cd364",
                        "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "ConversationsDAODynamoDB getConversation Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, mock_conv);\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.Item.session_id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "157cb40b-76b0-4ffa-914e-2a4561400385",
                        "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "uuid": "d7852712-1502-476b-a089-e33ffd23803a",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB getConversation Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield({ statusCode  :500, message : \"error downloading conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f3caf75-bc54-4edc-9b6f-8ff2f19cd364",
                        "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "ConversationsDAODynamoDB getConversation Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, mock_conv);\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.Item.session_id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "157cb40b-76b0-4ffa-914e-2a4561400385",
                        "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 0,
                    "rootEmpty": false
                  },
                  {
                    "title": "getConversationList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB getConversationList Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversationList().subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\ndynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2],LastEvaluatedKey:3});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\tcallNext = next.getCall(1);\nexpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "deaca613-014c-4192-b897-34fe8a71ecbe",
                        "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "ConversationsDAODynamoDB getConversationList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversationList().subscribe(\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnext: next,\n  \t\t\t\t\t\terror: error,\n  \t\t\t\t\t\tcomplete: complete\n  \t\t\t\t\t});\n  dynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2]});\n  expect(error.callCount).to.equal(0);\n  expect(next.callCount).to.equal(2);\n\t\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\n  expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b128857-9589-48f7-9090-1d3446fa8623",
                        "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "uuid": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB getConversationList Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversationList().subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\ndynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2],LastEvaluatedKey:3});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\tcallNext = next.getCall(1);\nexpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "deaca613-014c-4192-b897-34fe8a71ecbe",
                        "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "ConversationsDAODynamoDB getConversationList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.getConversationList().subscribe(\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnext: next,\n  \t\t\t\t\t\terror: error,\n  \t\t\t\t\t\tcomplete: complete\n  \t\t\t\t\t});\n  dynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2]});\n  expect(error.callCount).to.equal(0);\n  expect(next.callCount).to.equal(2);\n\t\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\n  expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b128857-9589-48f7-9090-1d3446fa8623",
                        "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeConversation",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB removeConversation Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6edf9515-761a-4cbd-bfd6-48de37ad0e83",
                        "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "ConversationsDAODynamoDB removeConversation Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c352c821-931d-42fa-b5d3-2b541cf09beb",
                        "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "uuid": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "ConversationsDAODynamoDB removeConversation Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6edf9515-761a-4cbd-bfd6-48de37ad0e83",
                        "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "ConversationsDAODynamoDB removeConversation Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c352c821-931d-42fa-b5d3-2b541cf09beb",
                        "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
                "uuid": "8be2469f-ba01-40e5-9c3f-ef32f22872bf",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
            "uuid": "6228ace7-29e5-40b2-b7dc-2de368305742",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_ConversationsDAODynamoDB.js",
        "uuid": "14d18328-f1b0-404f-93d9-a2d23cd838f6",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationsDAODynamoDB.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "ConversationWebhookService",
            "suites": [
              {
                "title": "webhook",
                "suites": [],
                "tests": [
                  {
                    "title": "La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
                    "fullTitle": "ConversationWebhookService webhook La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "body.result.action = 'user.check';\nlet ev = {body: JSON.stringify(body)};\nusers_DAO.getUserList.returns(Rx.Observable.of({ name : \"Mauro Carlin\", username : \"mou\"}));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\n//expect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'admin');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "809d7d6d-f37c-4b0e-bae0-e2254b96a1ea",
                    "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
                    "skipped": false
                  },
                  {
                    "title": "La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
                    "fullTitle": "ConversationWebhookService webhook La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "body.result.action = 'guest.check';\nlet ev = {body: JSON.stringify(body)};\nguests_DAO.getGuestList.returns(Rx.Observable.of([{ name : \"Mauro Carlin\", username : \"mou\", company : \"Google\"}]));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\nexpect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'welcome');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a70baa2-af0b-4740-809d-fcdac967b827",
                    "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ConversationWebhookService.js",
                "uuid": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationWebhookService.js",
                "passes": [
                  {
                    "title": "La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
                    "fullTitle": "ConversationWebhookService webhook La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "body.result.action = 'user.check';\nlet ev = {body: JSON.stringify(body)};\nusers_DAO.getUserList.returns(Rx.Observable.of({ name : \"Mauro Carlin\", username : \"mou\"}));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\n//expect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'admin');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "809d7d6d-f37c-4b0e-bae0-e2254b96a1ea",
                    "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
                    "skipped": false
                  },
                  {
                    "title": "La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
                    "fullTitle": "ConversationWebhookService webhook La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "body.result.action = 'guest.check';\nlet ev = {body: JSON.stringify(body)};\nguests_DAO.getGuestList.returns(Rx.Observable.of([{ name : \"Mauro Carlin\", username : \"mou\", company : \"Google\"}]));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\nexpect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'welcome');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a70baa2-af0b-4740-809d-fcdac967b827",
                    "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 10,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_ConversationWebhookService.js",
            "uuid": "263e9fc1-0a95-4033-8628-3030bae55ad6",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationWebhookService.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_ConversationWebhookService.js",
        "uuid": "3d36b30f-9dac-47f2-8cff-4453d7d31240",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ConversationWebhookService.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Libs",
        "suites": [
          {
            "title": "ErrorObserver",
            "suites": [
              {
                "title": "next",
                "suites": [],
                "tests": [
                  {
                    "title": "Deve sollevare un'eccezione se viene chiamato.",
                    "fullTitle": "ErrorObserver next Deve sollevare un'eccezione se viene chiamato.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "expect(obs.next.bind(obs)).to.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc60460d-6efe-4cc6-a304-41eab39865e1",
                    "parentUUID": "b312ec6d-2e5f-4bd2-a195-33ee58376e0b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ErrorObserver.js",
                "uuid": "b312ec6d-2e5f-4bd2-a195-33ee58376e0b",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ErrorObserver.js",
                "passes": [
                  {
                    "title": "Deve sollevare un'eccezione se viene chiamato.",
                    "fullTitle": "ErrorObserver next Deve sollevare un'eccezione se viene chiamato.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "expect(obs.next.bind(obs)).to.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc60460d-6efe-4cc6-a304-41eab39865e1",
                    "parentUUID": "b312ec6d-2e5f-4bd2-a195-33ee58376e0b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_ErrorObserver.js",
            "uuid": "621e956a-8c84-43e8-8a29-d29bdb4176d4",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ErrorObserver.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_ErrorObserver.js",
        "uuid": "d0a438a5-b3d3-4a8f-9778-37f75ba1d8e9",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ErrorObserver.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Guests",
            "suites": [
              {
                "title": "GuestsDAODynamoDB",
                "suites": [
                  {
                    "title": "addGuest",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB addGuest Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addGuest().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "753dbb52-26d3-4f90-b1f6-70561c4a8a3b",
                        "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB addGuest Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addGuest('mauro','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8c5fba9d-c2c2-463b-92dc-3ec00fcbb05a",
                        "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                    "uuid": "0278ab44-e86f-4644-8549-af97c2e6a21e",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB addGuest Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addGuest().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "753dbb52-26d3-4f90-b1f6-70561c4a8a3b",
                        "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB addGuest Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addGuest('mauro','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8c5fba9d-c2c2-463b-92dc-3ec00fcbb05a",
                        "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getGuest",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB getGuest Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n          {\n            next: next,\n            error: error,\n            complete: complete\n          });\n          dynamo_client.get.yield({ statusCode : 500, message : \"error getting data\" });\n          expect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b262d94a-d279-4046-9e36-43a0a6ecb5a8",
                        "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "GuestsDAODynamoDB getGuest Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, { Item:{name : \"Mauro\", company : \"Zero12\" }});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal( \"Mauro\");\n\t\t\t\t\texpect(callNext.args[0].company).to.equal(\"Zero12\");\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "60c965d0-1766-48ef-bb55-6f004ab99351",
                        "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                    "uuid": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB getGuest Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n          {\n            next: next,\n            error: error,\n            complete: complete\n          });\n          dynamo_client.get.yield({ statusCode : 500, message : \"error getting data\" });\n          expect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b262d94a-d279-4046-9e36-43a0a6ecb5a8",
                        "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "GuestsDAODynamoDB getGuest Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, { Item:{name : \"Mauro\", company : \"Zero12\" }});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal( \"Mauro\");\n\t\t\t\t\texpect(callNext.args[0].company).to.equal(\"Zero12\");\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "60c965d0-1766-48ef-bb55-6f004ab99351",
                        "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "getGuestList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB getGuestList Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Piero\", company : \"Google\" }], LastEvaluatedKey: 'Luca'});\ndynamo_client.scan.yield({ statusCode : 500 });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8776d3d8-1043-42f1-8b31-5b814cd33129",
                        "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "GuestsDAODynamoDB getGuestList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{name : \"Piero\", company : \"Google\" }]});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1fef49e6-822a-42d7-b42b-8826debe5cf0",
                        "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                    "uuid": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB getGuestList Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Piero\", company : \"Google\" }], LastEvaluatedKey: 'Luca'});\ndynamo_client.scan.yield({ statusCode : 500 });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8776d3d8-1043-42f1-8b31-5b814cd33129",
                        "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "fullTitle": "GuestsDAODynamoDB getGuestList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{name : \"Piero\", company : \"Google\" }]});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1fef49e6-822a-42d7-b42b-8826debe5cf0",
                        "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeGuest",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB removeGuest Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.removeGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing guest\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8d25fdf0-1be4-4750-ac84-15b3e8ba4888",
                        "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB removeGuest Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.removeGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e86c864f-323d-451d-9ad0-047bd5ce7dda",
                        "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                    "uuid": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB removeGuest Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.removeGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing guest\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8d25fdf0-1be4-4750-ac84-15b3e8ba4888",
                        "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB removeGuest Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.removeGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e86c864f-323d-451d-9ad0-047bd5ce7dda",
                        "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateGuest",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB updateGuest Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.updateGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating guest\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3371d654-5c3b-42d2-a4ab-537d8da7f4c3",
                        "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB updateGuest Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.updateGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6670ef9b-b7da-4ea5-bd1c-3ef6f8f68588",
                        "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                    "uuid": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB updateGuest Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.updateGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating guest\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3371d654-5c3b-42d2-a4ab-537d8da7f4c3",
                        "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB updateGuest Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.updateGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6670ef9b-b7da-4ea5-bd1c-3ef6f8f68588",
                        "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "addConversation",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB addConversation Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield({ statusCode: 500 }, null);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "544e1ed9-7c43-41ee-963c-c821171d7fc7",
                        "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB addConversation Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield(null, { Attributes: {conversations: [1,2] }});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "580adbdf-8ace-47a3-ab2d-40cff2ba6a99",
                        "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                    "uuid": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "fullTitle": "GuestsDAODynamoDB addConversation Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield({ statusCode: 500 }, null);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "544e1ed9-7c43-41ee-963c-c821171d7fc7",
                        "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "fullTitle": "GuestsDAODynamoDB addConversation Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield(null, { Attributes: {conversations: [1,2] }});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "580adbdf-8ace-47a3-ab2d-40cff2ba6a99",
                        "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
                "uuid": "39717cde-829c-458c-b547-37992d0b97ab",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
            "uuid": "86f38473-4d6f-484b-a668-92b809931e79",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_GuestsDAODynamoDB.js",
        "uuid": "94ea4d45-9304-42e3-a467-4742a54668c8",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_GuestsDAODynamoDB.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Members",
            "suites": [
              {
                "title": "MembersDAOSlack",
                "suites": [
                  {
                    "title": "addMember",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "fullTitle": "MembersDAOSlack addMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.addMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "67b8b705-9b39-436d-876d-fc1258636321",
                        "parentUUID": "9620d65a-bd4b-4e12-ba9f-cf08728b82cf",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_MembersDAOSlack.js",
                    "uuid": "9620d65a-bd4b-4e12-ba9f-cf08728b82cf",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
                    "passes": [
                      {
                        "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "fullTitle": "MembersDAOSlack addMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.addMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "67b8b705-9b39-436d-876d-fc1258636321",
                        "parentUUID": "9620d65a-bd4b-4e12-ba9f-cf08728b82cf",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 0,
                    "rootEmpty": false
                  },
                  {
                    "title": "getMember",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
                        "fullTitle": "MembersDAOSlack getMember Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Docs: https://api.slack.com/methods/users.info\nlet res =\n{\n\t'ok': true,\n\t'user':\n\t{\n\t\t'id': 'U023BECGF',\n\t\t'name': 'bobby',\n\t\t'deleted': false,\n\t\t'color': '9f69e7',\n\t\t'profile':\n\t\t{\n\t\t\t'avatar_hash': 'ge3b51ca72de',\n\t\t\t'current_status': ':mountain_railway: riding a train',\n\t\t\t'first_name': 'Bobby',\n\t\t\t'last_name': 'Tables',\n\t\t\t'real_name': 'Bobby Tables',\n\t\t\t'email': 'bobby@slack.com',\n\t\t\t'skype': 'my-skype-name',\n\t\t\t'phone': '+1 (123) 456 7890'\n\t\t},\n\t\t'is_admin': true,\n\t\t'is_owner': true,\n\t\t'updated': 1490054400,\n\t\t'has_2fa': true\n\t}\n};\nweb_client.users.info.yield(null, res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].id).to.equal(res.user.id);\nexpect(callNext.args[0].name).to.equal(res.user.name);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "375c8d11-bc06-4ac8-8244-21c9fbfc83c3",
                        "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
                        "skipped": false
                      },
                      {
                        "title": "Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "fullTitle": "MembersDAOSlack getMember Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.info.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1fad7301-530a-4f1b-aee9-2f7a7858bd77",
                        "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_MembersDAOSlack.js",
                    "uuid": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
                        "fullTitle": "MembersDAOSlack getMember Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Docs: https://api.slack.com/methods/users.info\nlet res =\n{\n\t'ok': true,\n\t'user':\n\t{\n\t\t'id': 'U023BECGF',\n\t\t'name': 'bobby',\n\t\t'deleted': false,\n\t\t'color': '9f69e7',\n\t\t'profile':\n\t\t{\n\t\t\t'avatar_hash': 'ge3b51ca72de',\n\t\t\t'current_status': ':mountain_railway: riding a train',\n\t\t\t'first_name': 'Bobby',\n\t\t\t'last_name': 'Tables',\n\t\t\t'real_name': 'Bobby Tables',\n\t\t\t'email': 'bobby@slack.com',\n\t\t\t'skype': 'my-skype-name',\n\t\t\t'phone': '+1 (123) 456 7890'\n\t\t},\n\t\t'is_admin': true,\n\t\t'is_owner': true,\n\t\t'updated': 1490054400,\n\t\t'has_2fa': true\n\t}\n};\nweb_client.users.info.yield(null, res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].id).to.equal(res.user.id);\nexpect(callNext.args[0].name).to.equal(res.user.name);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "375c8d11-bc06-4ac8-8244-21c9fbfc83c3",
                        "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
                        "skipped": false
                      },
                      {
                        "title": "Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "fullTitle": "MembersDAOSlack getMember Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.info.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1fad7301-530a-4f1b-aee9-2f7a7858bd77",
                        "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "getMemberList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
                        "fullTitle": "MembersDAOSlack getMemberList L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nlet res =\n{\n\t\"ok\": true,\n\t\"members\":\n\t[\n\t\t{\n\t\t\t\"id\": \"U023BECGF\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"mauro\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Mauro Bocciofilo\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\"\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"U023BECLL\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"bobby\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\",\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t}\n\t]\n}\nweb_client.users.list.yield(null,res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].members[0].id).to.equal(res.members[0].id);\nexpect(callNext.args[0].members[0].name).to.equal(res.members[0].name);\nexpect(callNext.args[0].members[1].id).to.equal(res.members[1].id);\nexpect(callNext.args[0].members[1].name).to.equal(res.members[1].name);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6a4197ec-c29f-4653-982b-2731b5650a78",
                        "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
                        "skipped": false
                      },
                      {
                        "title": "Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "fullTitle": "MembersDAOSlack getMemberList Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.list.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f535844e-2430-47fc-b33d-d47b15b1b096",
                        "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_MembersDAOSlack.js",
                    "uuid": "632e1d25-798f-496d-904a-16c4abd01939",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
                    "passes": [
                      {
                        "title": "L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
                        "fullTitle": "MembersDAOSlack getMemberList L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nlet res =\n{\n\t\"ok\": true,\n\t\"members\":\n\t[\n\t\t{\n\t\t\t\"id\": \"U023BECGF\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"mauro\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Mauro Bocciofilo\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\"\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"U023BECLL\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"bobby\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\",\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t}\n\t]\n}\nweb_client.users.list.yield(null,res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].members[0].id).to.equal(res.members[0].id);\nexpect(callNext.args[0].members[0].name).to.equal(res.members[0].name);\nexpect(callNext.args[0].members[1].id).to.equal(res.members[1].id);\nexpect(callNext.args[0].members[1].name).to.equal(res.members[1].name);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6a4197ec-c29f-4653-982b-2731b5650a78",
                        "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
                        "skipped": false
                      },
                      {
                        "title": "Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "fullTitle": "MembersDAOSlack getMemberList Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.list.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f535844e-2430-47fc-b33d-d47b15b1b096",
                        "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeMember",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "fullTitle": "MembersDAOSlack removeMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.removeMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b3e3371d-9288-4bdd-8dd7-4592988c5cbb",
                        "parentUUID": "262f348a-b96e-47bf-b040-a54baf6a0849",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_MembersDAOSlack.js",
                    "uuid": "262f348a-b96e-47bf-b040-a54baf6a0849",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
                    "passes": [
                      {
                        "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "fullTitle": "MembersDAOSlack removeMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.removeMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b3e3371d-9288-4bdd-8dd7-4592988c5cbb",
                        "parentUUID": "262f348a-b96e-47bf-b040-a54baf6a0849",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateMember",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "fullTitle": "MembersDAOSlack updateMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.updateMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "63451431-bb02-4a30-8895-0fd1a19a8473",
                        "parentUUID": "172fd663-3c3c-4e85-9e46-26a3184907bc",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_MembersDAOSlack.js",
                    "uuid": "172fd663-3c3c-4e85-9e46-26a3184907bc",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
                    "passes": [
                      {
                        "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "fullTitle": "MembersDAOSlack updateMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "members.updateMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "63451431-bb02-4a30-8895-0fd1a19a8473",
                        "parentUUID": "172fd663-3c3c-4e85-9e46-26a3184907bc",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_MembersDAOSlack.js",
                "uuid": "4aa2265b-10c2-4792-a6c4-82014652f5a4",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_MembersDAOSlack.js",
            "uuid": "41575b5f-d7da-4a30-a008-abdbfdb5b772",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_MembersDAOSlack.js",
        "uuid": "ae3a23ca-6379-4dda-8426-a0a080b08bfa",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_MembersDAOSlack.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Notifications",
            "suites": [
              {
                "title": "NotificationService",
                "suites": [
                  {
                    "title": "getChannelList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: ''};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields('errore');\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 500);\n  done();\n}",
                        "err": {},
                        "isRoot": false,
                        "uuid": "193b13c0-c7fb-4e69-889f-940987b019db",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields(null, groups);\n          client.users.list.yields('errore');\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2156a6ac-1c2b-4366-ba8e-418bcff81951",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields('errore');\n          client.users.list.yields(null, users);\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d8c15434-9efe-4724-a587-716172c2bfa7",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: null};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields(null, channels);\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 200);\n  done();\n}",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7342ee25-ef4a-44f6-9843-7b66f537919d",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_NotificationService.js",
                    "uuid": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_NotificationService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: ''};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields('errore');\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 500);\n  done();\n}",
                        "err": {},
                        "isRoot": false,
                        "uuid": "193b13c0-c7fb-4e69-889f-940987b019db",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields(null, groups);\n          client.users.list.yields('errore');\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2156a6ac-1c2b-4366-ba8e-418bcff81951",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields('errore');\n          client.users.list.yields(null, users);\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d8c15434-9efe-4724-a587-716172c2bfa7",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
                        "fullTitle": "NotificationService getChannelList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: '', queryStringParameters: null};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields(null, channels);\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 200);\n  done();\n}",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7342ee25-ef4a-44f6-9843-7b66f537919d",
                        "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 4,
                    "totalPasses": 4,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 6,
                    "rootEmpty": false
                  },
                  {
                    "title": "sendMsg",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService sendMsg Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield('errore');\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ae0ceb3d-f4da-4b11-ba0d-aa27a37595c1",
                        "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "NotificationService sendMsg Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield(null, responseSendMsg);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "766cab3f-44ee-47b9-a7ec-306059516b65",
                        "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "fullTitle": "NotificationService sendMsg Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: JSON.stringify(bad_request)};\nservice.sendMsg(ev, context);\n\nexpect(context.succeed.callCount).to.equal(1);\t\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cdcf8f35-5178-4b82-9894-0b963eca8740",
                        "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_NotificationService.js",
                    "uuid": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_NotificationService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "NotificationService sendMsg Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield('errore');\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ae0ceb3d-f4da-4b11-ba0d-aa27a37595c1",
                        "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "NotificationService sendMsg Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield(null, responseSendMsg);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "766cab3f-44ee-47b9-a7ec-306059516b65",
                        "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "fullTitle": "NotificationService sendMsg Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = {body: JSON.stringify(bad_request)};\nservice.sendMsg(ev, context);\n\nexpect(context.succeed.callCount).to.equal(1);\t\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cdcf8f35-5178-4b82-9894-0b963eca8740",
                        "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_NotificationService.js",
                "uuid": "01e6427e-ec3f-45c9-87ba-2136c5aac102",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_NotificationService.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_NotificationService.js",
            "uuid": "527826dd-f6fd-4f8f-8abf-1d0470133bf4",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_NotificationService.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_NotificationService.js",
        "uuid": "3dfa8af5-512e-4982-9915-661e27803867",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_NotificationService.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Libs",
        "suites": [
          {
            "title": "ObserverAdapter",
            "suites": [
              {
                "title": "complete",
                "suites": [],
                "tests": [
                  {
                    "title": "Deve chiamare complete_cb",
                    "fullTitle": "ObserverAdapter complete Deve chiamare complete_cb",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount, \"il callback di complete non è stato chiamato esattamente una volta.\").to.equal(1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "164b4e50-d696-451e-860c-72375fd7a329",
                    "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                    "skipped": false
                  },
                  {
                    "title": "Non deve chiamare complete_cb se l'observer è in pausa",
                    "fullTitle": "ObserverAdapter complete Non deve chiamare complete_cb se l'observer è in pausa",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onComplete(success);\nobs.pause();\nobs.complete();\nexpect(success.callCount).to.equal(0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4de0c6d-5cf4-4313-993b-3189d5ec1724",
                    "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                    "skipped": false
                  },
                  {
                    "title": "Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "fullTitle": "ObserverAdapter complete Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount).to.equal(1);\nobs.pause();\n        obs.complete();\n        expect(success.callCount).to.equal(1);\nobs.resume();\n        expect(success.callCount).to.equal(2);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f48a24c6-305f-45a2-a75f-1bbd55fc4a41",
                    "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ObserverAdapter.js",
                "uuid": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ObserverAdapter.js",
                "passes": [
                  {
                    "title": "Deve chiamare complete_cb",
                    "fullTitle": "ObserverAdapter complete Deve chiamare complete_cb",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount, \"il callback di complete non è stato chiamato esattamente una volta.\").to.equal(1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "164b4e50-d696-451e-860c-72375fd7a329",
                    "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                    "skipped": false
                  },
                  {
                    "title": "Non deve chiamare complete_cb se l'observer è in pausa",
                    "fullTitle": "ObserverAdapter complete Non deve chiamare complete_cb se l'observer è in pausa",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onComplete(success);\nobs.pause();\nobs.complete();\nexpect(success.callCount).to.equal(0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4de0c6d-5cf4-4313-993b-3189d5ec1724",
                    "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                    "skipped": false
                  },
                  {
                    "title": "Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "fullTitle": "ObserverAdapter complete Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount).to.equal(1);\nobs.pause();\n        obs.complete();\n        expect(success.callCount).to.equal(1);\nobs.resume();\n        expect(success.callCount).to.equal(2);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f48a24c6-305f-45a2-a75f-1bbd55fc4a41",
                    "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "error",
                "suites": [],
                "tests": [
                  {
                    "title": "Deve chiamare error_cb",
                    "fullTitle": "ObserverAdapter error Deve chiamare error_cb",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        let call = success.getCall(0);\n\n        expect(success.callCount).to.equal(1);\n        expect(call.args[0]).to.equal(err);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da3569fc-a24e-441b-a2f4-8829e6eec349",
                    "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                    "skipped": false
                  },
                  {
                    "title": "Non deve chiamare error_cb se l'observer è in pausa",
                    "fullTitle": "ObserverAdapter error Non deve chiamare error_cb se l'observer è in pausa",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onError(success);\nobs.pause();\nobs.error('errore');\n        expect(success.callCount).to.equal(0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65e1072f-f459-42dc-8f7c-9db51ff6fc20",
                    "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                    "skipped": false
                  },
                  {
                    "title": "Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "fullTitle": "ObserverAdapter error Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.pause();\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(2);\n        let call = success.getCall(1);\n        expect(call.args[0]).to.equal(err);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13860a7e-713e-449d-94c9-71a7e65b7b4f",
                    "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ObserverAdapter.js",
                "uuid": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ObserverAdapter.js",
                "passes": [
                  {
                    "title": "Deve chiamare error_cb",
                    "fullTitle": "ObserverAdapter error Deve chiamare error_cb",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        let call = success.getCall(0);\n\n        expect(success.callCount).to.equal(1);\n        expect(call.args[0]).to.equal(err);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da3569fc-a24e-441b-a2f4-8829e6eec349",
                    "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                    "skipped": false
                  },
                  {
                    "title": "Non deve chiamare error_cb se l'observer è in pausa",
                    "fullTitle": "ObserverAdapter error Non deve chiamare error_cb se l'observer è in pausa",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onError(success);\nobs.pause();\nobs.error('errore');\n        expect(success.callCount).to.equal(0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65e1072f-f459-42dc-8f7c-9db51ff6fc20",
                    "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                    "skipped": false
                  },
                  {
                    "title": "Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "fullTitle": "ObserverAdapter error Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.pause();\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(2);\n        let call = success.getCall(1);\n        expect(call.args[0]).to.equal(err);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13860a7e-713e-449d-94c9-71a7e65b7b4f",
                    "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              },
              {
                "title": "next",
                "suites": [],
                "tests": [
                  {
                    "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
                    "fullTitle": "ObserverAdapter next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nlet call = success.getCall(0);\nexpect(call.args[0]).to.equal('data');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8cb58066-4208-4eac-90c2-ee97394123bb",
                    "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                    "skipped": false
                  },
                  {
                    "title": "Non deve chiamare next_cb se l'observer è in pausa",
                    "fullTitle": "ObserverAdapter next Non deve chiamare next_cb se l'observer è in pausa",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onNext(success);\nobs.pause();\nobs.next('Function called');\nexpect(success.callCount).to.equal(0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a79d872-a40c-4c3c-8e5b-dc6efc2b3252",
                    "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                    "skipped": false
                  },
                  {
                    "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
                    "fullTitle": "ObserverAdapter next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.pause();\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(1);\nobs.next('other data');\nexpect(success.callCount).to.equal(2);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf55b7ae-26fa-4b00-9585-a3fdf3edbb10",
                    "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_ObserverAdapter.js",
                "uuid": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ObserverAdapter.js",
                "passes": [
                  {
                    "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
                    "fullTitle": "ObserverAdapter next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nlet call = success.getCall(0);\nexpect(call.args[0]).to.equal('data');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8cb58066-4208-4eac-90c2-ee97394123bb",
                    "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                    "skipped": false
                  },
                  {
                    "title": "Non deve chiamare next_cb se l'observer è in pausa",
                    "fullTitle": "ObserverAdapter next Non deve chiamare next_cb se l'observer è in pausa",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onNext(success);\nobs.pause();\nobs.next('Function called');\nexpect(success.callCount).to.equal(0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a79d872-a40c-4c3c-8e5b-dc6efc2b3252",
                    "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                    "skipped": false
                  },
                  {
                    "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
                    "fullTitle": "ObserverAdapter next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.pause();\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(1);\nobs.next('other data');\nexpect(success.callCount).to.equal(2);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf55b7ae-26fa-4b00-9585-a3fdf3edbb10",
                    "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_ObserverAdapter.js",
            "uuid": "5aa17d31-b074-41a4-8369-b01ef23009ad",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ObserverAdapter.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_ObserverAdapter.js",
        "uuid": "7111afa9-8dc8-448d-8bd6-029c6d4b7f4e",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_ObserverAdapter.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Rules",
            "suites": [
              {
                "title": "RulesDAODynamoDB",
                "suites": [
                  {
                    "title": "addRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB addRule Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.addRule(mock_rule).subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "934e4d87-01be-444f-acf3-15460f34536a",
                        "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB addRule Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.addRule(mock_rule).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "503cfc1b-beba-4010-8279-0dcd837d9f20",
                        "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesDAODynamoDB.js",
                    "uuid": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB addRule Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.addRule(mock_rule).subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "934e4d87-01be-444f-acf3-15460f34536a",
                        "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB addRule Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.addRule(mock_rule).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "503cfc1b-beba-4010-8279-0dcd837d9f20",
                        "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "getRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB getRule Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.getRule(1).subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n        expect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "21dc619c-91e6-40c6-ad11-1442868ac06e",
                        "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB getRule Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = rules.getRule(1);\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_rule);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.Item.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "345df0f6-fa34-4840-94b1-b70d9eb5d099",
                        "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesDAODynamoDB.js",
                    "uuid": "05b253d1-4b06-475d-8369-e3533b9fcadc",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB getRule Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.getRule(1).subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n        expect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "21dc619c-91e6-40c6-ad11-1442868ac06e",
                        "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB getRule Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = rules.getRule(1);\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_rule);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.Item.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "345df0f6-fa34-4840-94b1-b70d9eb5d099",
                        "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getRuleList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB getRuleList Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2],LastEvaluatedKey:3});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d4a87f6a-2a70-4e9c-8324-3218f7b80b41",
                        "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB getRuleList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "03a52eed-d228-4ce0-ba73-bf66dd2c67eb",
                        "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB getRuleList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "//da definire",
                        "err": {},
                        "isRoot": false,
                        "uuid": "85e87854-923e-4963-bc32-c5b333ff66bb",
                        "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesDAODynamoDB.js",
                    "uuid": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB getRuleList Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2],LastEvaluatedKey:3});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d4a87f6a-2a70-4e9c-8324-3218f7b80b41",
                        "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB getRuleList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "03a52eed-d228-4ce0-ba73-bf66dd2c67eb",
                        "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB getRuleList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "//da definire",
                        "err": {},
                        "isRoot": false,
                        "uuid": "85e87854-923e-4963-bc32-c5b333ff66bb",
                        "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB removeRule Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bced9eb7-0935-4d60-9908-f9ccfb02dead",
                        "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB removeRule Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e3e011d3-501d-46f6-9b90-1cdb72936702",
                        "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesDAODynamoDB.js",
                    "uuid": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB removeRule Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bced9eb7-0935-4d60-9908-f9ccfb02dead",
                        "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB removeRule Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e3e011d3-501d-46f6-9b90-1cdb72936702",
                        "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 0,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB updateRule Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5c7da28f-01a5-43d5-b23d-da7e128d55a8",
                        "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB updateRule Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "447686e3-caa4-44c9-ad92-ec66ddf71e3d",
                        "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesDAODynamoDB.js",
                    "uuid": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "RulesDAODynamoDB updateRule Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5c7da28f-01a5-43d5-b23d-da7e128d55a8",
                        "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "RulesDAODynamoDB updateRule Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "447686e3-caa4-44c9-ad92-ec66ddf71e3d",
                        "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_RulesDAODynamoDB.js",
                "uuid": "d226ccff-6f43-4eac-bd01-b98c79d872a3",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_RulesDAODynamoDB.js",
            "uuid": "33322c66-e599-491b-981d-2437fc224aa6",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_RulesDAODynamoDB.js",
        "uuid": "62650b35-2f82-494b-a845-7f76c700a1b4",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesDAODynamoDB.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Rules",
            "suites": [
              {
                "title": "RulesService",
                "suites": [
                  {
                    "title": "addRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "fullTitle": "RulesService addRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: \"\"};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1674d18a-5a83-4caf-8846-12583e8cd6c0",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService addRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "de153504-a563-4490-a27b-661ae53e130a",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "RulesService addRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.empty());\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6b942434-fc86-4f3c-9e37-9538706a122d",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "fullTitle": "RulesService addRule Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { body: JSON.stringify(rule) };\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24d0af1b-2539-48ca-8e56-1ac8af8f5f8c",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesService.js",
                    "uuid": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "fullTitle": "RulesService addRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: \"\"};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1674d18a-5a83-4caf-8846-12583e8cd6c0",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService addRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "de153504-a563-4490-a27b-661ae53e130a",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "RulesService addRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.empty());\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6b942434-fc86-4f3c-9e37-9538706a122d",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "fullTitle": "RulesService addRule Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.addRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { body: JSON.stringify(rule) };\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24d0af1b-2539-48ca-8e56-1ac8af8f5f8c",
                        "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 4,
                    "totalPasses": 4,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 4,
                    "rootEmpty": false
                  },
                  {
                    "title": "deleteRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService deleteRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.removeRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "361ad7bf-ee31-49ea-bf21-9bc46909f363",
                        "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "RulesService deleteRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.removeRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70f32ba1-df22-443b-9957-30963e0ca8b2",
                        "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "fullTitle": "RulesService deleteRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "{\n  rulesDAO.removeRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\n  let ev = {pathParameters: { id: 1 }};\n  rules.deleteRule(ev, context);\n  let call = context.succeed.getCall(0);\n  expect(context.succeed.calledOnce).to.be.true;\n  expect(call.args[0]).not.to.be.null;\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 404);\n};",
                        "err": {},
                        "isRoot": false,
                        "uuid": "80eed219-b4c0-4c48-9cab-b2d5962fcae1",
                        "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesService.js",
                    "uuid": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService deleteRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.removeRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "361ad7bf-ee31-49ea-bf21-9bc46909f363",
                        "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "RulesService deleteRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.removeRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70f32ba1-df22-443b-9957-30963e0ca8b2",
                        "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "fullTitle": "RulesService deleteRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "{\n  rulesDAO.removeRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\n  let ev = {pathParameters: { id: 1 }};\n  rules.deleteRule(ev, context);\n  let call = context.succeed.getCall(0);\n  expect(context.succeed.calledOnce).to.be.true;\n  expect(call.args[0]).not.to.be.null;\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 404);\n};",
                        "err": {},
                        "isRoot": false,
                        "uuid": "80eed219-b4c0-4c48-9cab-b2d5962fcae1",
                        "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
                        "fullTitle": "RulesService getRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRule.returns(Rx.Observable.of(rule));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify(rule));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dd96d9e9-73ad-4b34-8c50-913c43728867",
                        "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService getRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8c54c567-b5e3-4e35-b84c-e47a0f9f381b",
                        "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "fullTitle": "RulesService getRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRule.returns(Rx.Observable.throw({ code: 'Not found' }));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "749eb433-b190-4ec6-9811-771631eb928d",
                        "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesService.js",
                    "uuid": "87f5b940-cacc-47f6-a220-04c266d28f86",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
                        "fullTitle": "RulesService getRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRule.returns(Rx.Observable.of(rule));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify(rule));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dd96d9e9-73ad-4b34-8c50-913c43728867",
                        "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService getRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8c54c567-b5e3-4e35-b84c-e47a0f9f381b",
                        "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "fullTitle": "RulesService getRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRule.returns(Rx.Observable.throw({ code: 'Not found' }));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "749eb433-b190-4ec6-9811-771631eb928d",
                        "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getRuleList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
                        "fullTitle": "RulesService getRuleList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRuleList.returns(Rx.Observable.of(rule_1, rule_2));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ rules: [rule_1, rule_2] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24a91b29-1fb3-456d-89a1-b84f022bbe85",
                        "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService getRuleList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRuleList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "02c0b11a-ac3d-4d15-9285-a93c10989d27",
                        "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesService.js",
                    "uuid": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
                        "fullTitle": "RulesService getRuleList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRuleList.returns(Rx.Observable.of(rule_1, rule_2));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ rules: [rule_1, rule_2] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24a91b29-1fb3-456d-89a1-b84f022bbe85",
                        "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService getRuleList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.getRuleList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "02c0b11a-ac3d-4d15-9285-a93c10989d27",
                        "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "getTaskList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
                        "fullTitle": "RulesService getTaskList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "taskDAO.getTaskList.returns(Rx.Observable.of(task_1));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ tasks: [task_1] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "de0c99e0-dc0b-4bb3-b240-aa39ffb3253f",
                        "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService getTaskList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "taskDAO.getTaskList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a341108f-a681-4925-be66-f3b2e866edd0",
                        "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesService.js",
                    "uuid": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
                        "fullTitle": "RulesService getTaskList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "taskDAO.getTaskList.returns(Rx.Observable.of(task_1));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ tasks: [task_1] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "de0c99e0-dc0b-4bb3-b240-aa39ffb3253f",
                        "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService getTaskList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "taskDAO.getTaskList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a341108f-a681-4925-be66-f3b2e866edd0",
                        "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "RulesService updateRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.updateRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "707839fe-6576-4a1f-bb39-718966de647a",
                        "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "fullTitle": "RulesService updateRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: \"\" , body: \"\"};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "61296071-82c7-481b-bb79-aa83e584e793",
                        "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService updateRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b610349-3571-45f4-8a04-a13584e3c7b9",
                        "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_RulesService.js",
                    "uuid": "f359a61f-53e0-4849-9350-f676a79cdc49",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "fullTitle": "RulesService updateRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.updateRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "707839fe-6576-4a1f-bb39-718966de647a",
                        "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "fullTitle": "RulesService updateRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: \"\" , body: \"\"};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "61296071-82c7-481b-bb79-aa83e584e793",
                        "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "fullTitle": "RulesService updateRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b610349-3571-45f4-8a04-a13584e3c7b9",
                        "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_RulesService.js",
                "uuid": "4ecfe921-2127-466c-80ce-f602d515698c",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_RulesService.js",
            "uuid": "2e90b7d8-9366-4009-a5ae-4b4fcebe5bf9",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_RulesService.js",
        "uuid": "a33ab96b-5860-4d1f-9162-e156fd31b350",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_RulesService.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "STT",
            "suites": [
              {
                "title": "STTWatsonAdapter",
                "suites": [
                  {
                    "title": "speechToText",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
                        "fullTitle": "STTWatsonAdapter speechToText Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let reject = sinon.stub();\nlet promise = watson.speechToText();\npromise.catch(reject);\ndone();\nexpect(reject.callCount).to.equal(1);\nlet call = reject.getCall(0);\nexpect(call.args[0]).to.deep.equal({code: 500});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3c0189b2-57ed-4624-b102-f0f3368eca31",
                        "parentUUID": "c2a6a27f-970f-4b54-aac1-55dab2da64e9",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_STTWatsonAdapter.js",
                    "uuid": "c2a6a27f-970f-4b54-aac1-55dab2da64e9",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_STTWatsonAdapter.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
                        "fullTitle": "STTWatsonAdapter speechToText Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let reject = sinon.stub();\nlet promise = watson.speechToText();\npromise.catch(reject);\ndone();\nexpect(reject.callCount).to.equal(1);\nlet call = reject.getCall(0);\nexpect(call.args[0]).to.deep.equal({code: 500});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3c0189b2-57ed-4624-b102-f0f3368eca31",
                        "parentUUID": "c2a6a27f-970f-4b54-aac1-55dab2da64e9",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_STTWatsonAdapter.js",
                "uuid": "18e2e45e-af1d-49f5-b680-f1433754d2d2",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_STTWatsonAdapter.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_STTWatsonAdapter.js",
            "uuid": "d2849209-c25b-455f-a22f-7bae511b6a33",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_STTWatsonAdapter.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_STTWatsonAdapter.js",
        "uuid": "dd61722b-8b03-406a-b851-c77c03b42510",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_STTWatsonAdapter.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Tasks",
            "suites": [
              {
                "title": "TasksDAODynamoDB",
                "suites": [
                  {
                    "title": "addTask",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB addTask Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.addTask(mock_task).subscribe(\n\t\t\t\t\t{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5bac7e4d-6ace-419b-b143-e9926c97fd91",
                        "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB addTask Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.addTask(mock_task).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "42f93b22-bdc4-4875-b595-5023c1452e15",
                        "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_TasksDAODynamoDB.js",
                    "uuid": "91b18b66-4766-489b-8b7f-13f9944c23f4",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB addTask Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.addTask(mock_task).subscribe(\n\t\t\t\t\t{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5bac7e4d-6ace-419b-b143-e9926c97fd91",
                        "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB addTask Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.addTask(mock_task).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "42f93b22-bdc4-4875-b595-5023c1452e15",
                        "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getTask",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB getTask Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.getTask('mock_type').subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3cfd4d56-7c37-4a09-aad0-501abbaa9130",
                        "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB getTask Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = tasks.getTask('mock_type');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_task);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.Item.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cec36c77-a3a1-478d-8ef1-e9188d14c3cf",
                        "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_TasksDAODynamoDB.js",
                    "uuid": "099c502d-b5e9-45d7-8547-25e35212d3d8",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB getTask Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.getTask('mock_type').subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3cfd4d56-7c37-4a09-aad0-501abbaa9130",
                        "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB getTask Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = tasks.getTask('mock_type');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_task);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.Item.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cec36c77-a3a1-478d-8ef1-e9188d14c3cf",
                        "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getTaskList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB getTaskList Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{mock_task}], LastEvaluatedKey: \"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items: [{mock_task2}], LastEvaluatedKey: \"mock_type3\"});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b7ea70d0-04f4-4cf0-928b-61b8ce7b6a55",
                        "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB getTaskList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task],LastEvaluatedKey:\"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8f938647-2fef-4dbb-a072-6318ef9cad47",
                        "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_TasksDAODynamoDB.js",
                    "uuid": "1b6a918c-e231-43ba-8b1e-c2745b127421",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB getTaskList Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{mock_task}], LastEvaluatedKey: \"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items: [{mock_task2}], LastEvaluatedKey: \"mock_type3\"});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b7ea70d0-04f4-4cf0-928b-61b8ce7b6a55",
                        "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB getTaskList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task],LastEvaluatedKey:\"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8f938647-2fef-4dbb-a072-6318ef9cad47",
                        "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeTask",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB removeTask Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1243fdb4-4787-4a29-b7ad-282b21e87191",
                        "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB removeTask Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "659e1a19-d564-46bf-b881-4dc2187ad8fc",
                        "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_TasksDAODynamoDB.js",
                    "uuid": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB removeTask Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1243fdb4-4787-4a29-b7ad-282b21e87191",
                        "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB removeTask Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "659e1a19-d564-46bf-b881-4dc2187ad8fc",
                        "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 0,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateTask",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB updateTask Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n  \t\t\t\t\terror: error,\n  \t\t\t\t\tcomplete: complete\n  \t\t\t\t});\n  \t\t\t\t\tdynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\n\texpect(error.callCount).to.equal(1);\n\tlet callError = error.getCall(0);\n\texpect(callError.args[0].statusCode).to.equal(500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8504f966-68d3-4836-81ad-ad5cada735c1",
                        "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB updateTask Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "28aa9f5a-915d-4b3a-acaa-dfaec7c73215",
                        "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_TasksDAODynamoDB.js",
                    "uuid": "5fa06823-14a6-401d-b42f-033e00297dcb",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "TasksDAODynamoDB updateTask Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n  \t\t\t\t\terror: error,\n  \t\t\t\t\tcomplete: complete\n  \t\t\t\t});\n  \t\t\t\t\tdynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\n\texpect(error.callCount).to.equal(1);\n\tlet callError = error.getCall(0);\n\texpect(callError.args[0].statusCode).to.equal(500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8504f966-68d3-4836-81ad-ad5cada735c1",
                        "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "TasksDAODynamoDB updateTask Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "28aa9f5a-915d-4b3a-acaa-dfaec7c73215",
                        "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_TasksDAODynamoDB.js",
                "uuid": "9949f0a0-0ce3-4bee-a103-766e1814ff8d",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_TasksDAODynamoDB.js",
            "uuid": "2d7e2650-1a73-4aeb-bcce-348046b14b22",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_TasksDAODynamoDB.js",
        "uuid": "4dbc63c1-1034-4563-b2a4-edada79edfdd",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_TasksDAODynamoDB.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Users",
            "suites": [
              {
                "title": "UsersDAODynamoDB",
                "suites": [
                  {
                    "title": "addUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB addUser Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.addUser('mou').subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\n\t\t\t\t\t//TableName: [nome tabella che non esiste]\n\t\t\t\t\tdynamo_client.put.yield({statusCode: 400, message:\"Requested resource not found\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2433a75a-55dc-4c45-8002-333e240b3fed",
                        "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB addUser Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.addUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71d8a601-23b5-4b1c-aab0-15532fba3a8c",
                        "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersDAODynamoDB.js",
                    "uuid": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB addUser Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.addUser('mou').subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\n\t\t\t\t\t//TableName: [nome tabella che non esiste]\n\t\t\t\t\tdynamo_client.put.yield({statusCode: 400, message:\"Requested resource not found\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2433a75a-55dc-4c45-8002-333e240b3fed",
                        "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB addUser Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.addUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71d8a601-23b5-4b1c-aab0-15532fba3a8c",
                        "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB getUser Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode: 500, message:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e647fbb-14a2-4528-a7ea-0cce4231b29a",
                        "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUser Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = users.getUser('mou');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.get.yield(null, {Item: {name: \"mauro\", username: \"mou\"}});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal('mauro');\n\t\t\t\t\texpect(callNext.args[0].username).to.equal('mou');\n\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71b1ff63-6baf-48f8-a201-3fd68b3fcb3a",
                        "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersDAODynamoDB.js",
                    "uuid": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB getUser Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode: 500, message:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e647fbb-14a2-4528-a7ea-0cce4231b29a",
                        "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUser Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let observable = users.getUser('mou');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.get.yield(null, {Item: {name: \"mauro\", username: \"mou\"}});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal('mauro');\n\t\t\t\t\texpect(callNext.args[0].username).to.equal('mou');\n\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71b1ff63-6baf-48f8-a201-3fd68b3fcb3a",
                        "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "getUserList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}], LastEvaluatedKey: 'marco'});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\n\n          expect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3e8042e-1b92-41b5-97a5-34db559918b1",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5a305065-883c-4efc-957a-001b810df4a2",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let query =\n{\n\tname: 'mauro'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a249c586-c79d-4f2b-abf2-acd05ccd7b26",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let query =\n{\n\tname: 'mauro',\n\tslack_channel: 'channel'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name and slack_channel = :slack_channel');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:slack_channel', 'channel' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f776324b-dd8c-4398-b072-c422452452ba",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersDAODynamoDB.js",
                    "uuid": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}], LastEvaluatedKey: 'marco'});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\n\n          expect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3e8042e-1b92-41b5-97a5-34db559918b1",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5a305065-883c-4efc-957a-001b810df4a2",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let query =\n{\n\tname: 'mauro'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a249c586-c79d-4f2b-abf2-acd05ccd7b26",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let query =\n{\n\tname: 'mauro',\n\tslack_channel: 'channel'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name and slack_channel = :slack_channel');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:slack_channel', 'channel' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f776324b-dd8c-4398-b072-c422452452ba",
                        "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 4,
                    "totalPasses": 4,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 4,
                    "rootEmpty": false
                  },
                  {
                    "title": "removeUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB removeUser Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.delete.yield({statusCode: 500, message: \"error removing user\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70ecaf17-d8cc-4dcc-8e66-fbc752b593e0",
                        "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
                        "fullTitle": "UsersDAODynamoDB removeUser Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24cd4871-5284-4146-9984-f989a46d6967",
                        "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersDAODynamoDB.js",
                    "uuid": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB removeUser Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.delete.yield({statusCode: 500, message: \"error removing user\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70ecaf17-d8cc-4dcc-8e66-fbc752b593e0",
                        "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
                        "fullTitle": "UsersDAODynamoDB removeUser Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24cd4871-5284-4146-9984-f989a46d6967",
                        "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB updateUser Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message: \"error updating user\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12dec5a4-3114-4254-8c1b-4de61a05c51c",
                        "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB updateUser Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cf1757ff-525d-4351-9cc1-af9d61d15f5d",
                        "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersDAODynamoDB.js",
                    "uuid": "516606e8-a45a-4765-a379-77ad44f54277",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "fullTitle": "UsersDAODynamoDB updateUser Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message: \"error updating user\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12dec5a4-3114-4254-8c1b-4de61a05c51c",
                        "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "fullTitle": "UsersDAODynamoDB updateUser Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cf1757ff-525d-4351-9cc1-af9d61d15f5d",
                        "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_UsersDAODynamoDB.js",
                "uuid": "6bca3bdf-3cd7-4391-bfab-72789721eacc",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_UsersDAODynamoDB.js",
            "uuid": "eb78edcd-0069-40d2-a15f-8c0d10039966",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_UsersDAODynamoDB.js",
        "uuid": "4cb1c481-2ea6-4d7e-b34b-948aa16b6bf5",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersDAODynamoDB.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Users",
            "suites": [
              {
                "title": "UsersService",
                "suites": [
                  {
                    "title": "addUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService addUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "584e0bde-9cbe-474b-9b6f-f910cb839772",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "fullTitle": "UsersService addUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.empty());\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4c7de136-9b70-4865-a84b-e86ac58eb34c",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "fullTitle": "UsersService addUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\n          let ev = { body: \"\" };\n          service.addUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dcf6e942-f678-4f00-8a8e-8bf44321913c",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "fullTitle": "UsersService addUser Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ffc49c2b-e8f8-4489-86d6-d22d9e60a775",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersService.js",
                    "uuid": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService addUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "584e0bde-9cbe-474b-9b6f-f910cb839772",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "fullTitle": "UsersService addUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.empty());\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4c7de136-9b70-4865-a84b-e86ac58eb34c",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "fullTitle": "UsersService addUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\n          let ev = { body: \"\" };\n          service.addUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dcf6e942-f678-4f00-8a8e-8bf44321913c",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "fullTitle": "UsersService addUser Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.addUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ffc49c2b-e8f8-4489-86d6-d22d9e60a775",
                        "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 4,
                    "totalPasses": 4,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "deleteUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService deleteUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.removeUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "527798db-4117-4d43-9e24-bb78024275f7",
                        "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "fullTitle": "UsersService deleteUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.removeUser.returns(Rx.Observable.empty());\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2af69d0c-4bea-4975-87ce-4e145481423d",
                        "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "fullTitle": "UsersService deleteUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.removeUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { pathParameters: { username: 'pippo' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9e0ac3ba-43b5-48b4-a156-aacacd78c0a9",
                        "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersService.js",
                    "uuid": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService deleteUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.removeUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "527798db-4117-4d43-9e24-bb78024275f7",
                        "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "fullTitle": "UsersService deleteUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.removeUser.returns(Rx.Observable.empty());\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2af69d0c-4bea-4975-87ce-4e145481423d",
                        "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "fullTitle": "UsersService deleteUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.removeUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { pathParameters: { username: 'pippo' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9e0ac3ba-43b5-48b4-a156-aacacd78c0a9",
                        "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService getUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ba417d8-2bba-4ca1-a11c-f523c4794c8d",
                        "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
                        "fullTitle": "UsersService getUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUser.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ name : 'Mauro', username : 'mou' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c4fa0022-1aba-435b-bbe9-92af173cecf2",
                        "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "fullTitle": "UsersService getUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUser.returns(Rx.Observable.throw({ code: 'Not found' }));\n          let ev = { pathParameters: { username: 'pippo'} };\n          service.getUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "13fb6b81-085c-4919-a6aa-c34c43a07112",
                        "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersService.js",
                    "uuid": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService getUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ba417d8-2bba-4ca1-a11c-f523c4794c8d",
                        "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
                        "fullTitle": "UsersService getUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUser.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ name : 'Mauro', username : 'mou' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c4fa0022-1aba-435b-bbe9-92af173cecf2",
                        "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "fullTitle": "UsersService getUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUser.returns(Rx.Observable.throw({ code: 'Not found' }));\n          let ev = { pathParameters: { username: 'pippo'} };\n          service.getUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "13fb6b81-085c-4919-a6aa-c34c43a07112",
                        "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "getUserList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService getUserList Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUserList.returns(Rx.Observable.throw(new Error()));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70819cd4-26ac-494c-9a6a-364c9f708a56",
                        "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
                        "fullTitle": "UsersService getUserList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUserList.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ users: [{ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "427574cc-a0b2-4674-85ed-98eb964196f4",
                        "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersService.js",
                    "uuid": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService getUserList Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUserList.returns(Rx.Observable.throw(new Error()));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70819cd4-26ac-494c-9a6a-364c9f708a56",
                        "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
                        "fullTitle": "UsersService getUserList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.getUserList.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ users: [{ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "427574cc-a0b2-4674-85ed-98eb964196f4",
                        "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "updateUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService updateUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.updateUser.returns(Rx.Observable.throw(new Error()));\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "332976fa-5130-40b7-8f05-0453f492dafe",
                        "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "fullTitle": "UsersService updateUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.updateUser.returns(Rx.Observable.empty());\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "61c99b34-10db-4968-8d2e-7717a326d5e6",
                        "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "fullTitle": "UsersService updateUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = { pathParameters: \"\", body: \"\" };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f17a565-39dc-45d1-9026-de65d6850c53",
                        "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_UsersService.js",
                    "uuid": "52ba070d-3a13-444f-985d-5b832579633e",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "fullTitle": "UsersService updateUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.updateUser.returns(Rx.Observable.throw(new Error()));\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "332976fa-5130-40b7-8f05-0453f492dafe",
                        "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "fullTitle": "UsersService updateUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "users_DAO.updateUser.returns(Rx.Observable.empty());\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "61c99b34-10db-4968-8d2e-7717a326d5e6",
                        "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "fullTitle": "UsersService updateUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let ev = { pathParameters: \"\", body: \"\" };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f17a565-39dc-45d1-9026-de65d6850c53",
                        "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 3,
                    "totalPasses": 3,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_UsersService.js",
                "uuid": "dbcc9f04-8840-4ae2-8c5b-8d9ee9765591",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_UsersService.js",
            "uuid": "8541b9b3-907a-4f3e-91b2-07c3eab023f9",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_UsersService.js",
        "uuid": "7632b266-0aa8-4110-9f78-2d08cf016c48",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_UsersService.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Events",
            "suites": [
              {
                "title": "VAMessageListener",
                "suites": [
                  {
                    "title": "onMessage",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.reject(JSON.stringify(notifications_error)));\nconversations.addMessage.returns(Rx.Observable.throw(new Error()));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "445aa1eb-908a-4bc9-a1e1-fa54c2a5caa9",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.reject(JSON.stringify(rules_error)));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fdde9ab2-e797-4b53-8eb3-532a66ae2a8b",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'msg': 'error getting guest' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5adb5032-e2b4-48f4-9355-909020f3b1da",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nconversations.addConversation.yield({ 'msg': 'error adding conversation' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "22ecbdd2-e85b-4695-bd0c-2a8d97a51537",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.resolve(JSON.stringify(notifications_response)));\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'type': 'example' });\nconversations.addConversation.yield(null, {});\nexpect(callback.callCount).to.equal(1);\nexpect(callback.getCall(0).args[0]).to.be.null;\nexpect(callback.getCall(0).args[1]).to.not.be.null;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "459505e4-3403-4fcb-8c5d-34125494bd74",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VAMessageListener.js",
                    "uuid": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAMessageListener.js",
                    "passes": [
                      {
                        "title": "Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.reject(JSON.stringify(notifications_error)));\nconversations.addMessage.returns(Rx.Observable.throw(new Error()));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "445aa1eb-908a-4bc9-a1e1-fa54c2a5caa9",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.reject(JSON.stringify(rules_error)));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fdde9ab2-e797-4b53-8eb3-532a66ae2a8b",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'msg': 'error getting guest' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5adb5032-e2b4-48f4-9355-909020f3b1da",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nconversations.addConversation.yield({ 'msg': 'error adding conversation' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "22ecbdd2-e85b-4695-bd0c-2a8d97a51537",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      },
                      {
                        "title": "Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
                        "fullTitle": "VAMessageListener onMessage Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.resolve(JSON.stringify(notifications_response)));\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'type': 'example' });\nconversations.addConversation.yield(null, {});\nexpect(callback.callCount).to.equal(1);\nexpect(callback.getCall(0).args[0]).to.be.null;\nexpect(callback.getCall(0).args[1]).to.not.be.null;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "459505e4-3403-4fcb-8c5d-34125494bd74",
                        "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_VAMessageListener.js",
                "uuid": "78aaab95-5fa6-4008-898e-75999ffe29ee",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAMessageListener.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_VAMessageListener.js",
            "uuid": "b21c9fa3-8ef8-4b42-ad04-2ed61664baf1",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAMessageListener.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_VAMessageListener.js",
        "uuid": "8f0d3a3b-679d-41b3-aa7b-5fd94f9ac583",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAMessageListener.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "VirtualAssistant",
            "suites": [
              {
                "title": "VAService",
                "suites": [
                  {
                    "title": "query",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
                        "fullTitle": "VAService query Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.resolve(res_body));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\texpect(agents.getAgent.callCount).to.equal(1);\n\texpect(agents.getAgent.calledWith('test'));\n\tlet result = context.succeed.getCall(0).args[0];\n            expect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(200);\n            done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "226cf9e1-13b9-4856-a032-040122b5641b",
                        "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
                        "skipped": false
                      },
                      {
                        "title": "Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
                        "fullTitle": "VAService query Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.reject(error));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\tlet result = context.succeed.getCall(0).args[0];\n\texpect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(412);\n            done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9e8e83cb-5035-4258-8a63-7e375bf0da82",
                        "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VAService.js",
                    "uuid": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAService.js",
                    "passes": [
                      {
                        "title": "Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
                        "fullTitle": "VAService query Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.resolve(res_body));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\texpect(agents.getAgent.callCount).to.equal(1);\n\texpect(agents.getAgent.calledWith('test'));\n\tlet result = context.succeed.getCall(0).args[0];\n            expect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(200);\n            done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "226cf9e1-13b9-4856-a032-040122b5641b",
                        "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
                        "skipped": false
                      },
                      {
                        "title": "Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
                        "fullTitle": "VAService query Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.reject(error));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\tlet result = context.succeed.getCall(0).args[0];\n\texpect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(412);\n            done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9e8e83cb-5035-4258-8a63-7e375bf0da82",
                        "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 6,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_VAService.js",
                "uuid": "d38e3021-b43f-4b32-b6ca-aa17357ce951",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAService.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_VAService.js",
            "uuid": "7201b2e5-15e3-4cda-8668-578728efc4f0",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAService.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_VAService.js",
        "uuid": "d07b8eac-1534-40fb-826c-a088c8f6005d",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VAService.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "APIGateway",
            "suites": [
              {
                "title": "VocalAPI",
                "suites": [
                  {
                    "title": "_addRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _addRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._addRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "29caa929-a0f0-4dde-b8c0-65472fc4cc40",
                        "parentUUID": "9daec29c-268a-4c98-88ed-d54afc57c5b9",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "9daec29c-268a-4c98-88ed-d54afc57c5b9",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _addRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._addRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "29caa929-a0f0-4dde-b8c0-65472fc4cc40",
                        "parentUUID": "9daec29c-268a-4c98-88ed-d54afc57c5b9",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "_addUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _addUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._addUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ec12e84-282b-4290-8c1d-08f49a54fd3a",
                        "parentUUID": "9f7c5468-bd18-461e-aec0-24783382a75b",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "9f7c5468-bd18-461e-aec0-24783382a75b",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _addUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._addUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ec12e84-282b-4290-8c1d-08f49a54fd3a",
                        "parentUUID": "9f7c5468-bd18-461e-aec0-24783382a75b",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "_addUserEnrollment",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _addUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.addEnrollment.returns(Rx.Observable.throw(errore));\napi._addUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "55d2c52c-f810-4ac8-ac11-a6cb50c8c8e2",
                        "parentUUID": "db0e07f5-b977-44d4-bdfd-cfa75e777175",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "db0e07f5-b977-44d4-bdfd-cfa75e777175",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _addUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.addEnrollment.returns(Rx.Observable.throw(errore));\napi._addUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "55d2c52c-f810-4ac8-ac11-a6cb50c8c8e2",
                        "parentUUID": "db0e07f5-b977-44d4-bdfd-cfa75e777175",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "_getRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getRule(5).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "66bcaf1d-f8e5-4520-a7dc-8ab14b474f47",
                        "parentUUID": "b6a175e2-678e-438c-88ba-ea67fc2550de",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "b6a175e2-678e-438c-88ba-ea67fc2550de",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getRule(5).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "66bcaf1d-f8e5-4520-a7dc-8ab14b474f47",
                        "parentUUID": "b6a175e2-678e-438c-88ba-ea67fc2550de",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "_getRuleList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getRuleList Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getRuleList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c4da9def-8688-417c-9f3a-38db852bbf48",
                        "parentUUID": "8623eed6-bd3a-408a-bdab-618a75deccec",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "8623eed6-bd3a-408a-bdab-618a75deccec",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getRuleList Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getRuleList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c4da9def-8688-417c-9f3a-38db852bbf48",
                        "parentUUID": "8623eed6-bd3a-408a-bdab-618a75deccec",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 1,
                    "rootEmpty": false
                  },
                  {
                    "title": "_getUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3bcc2dbc-0f81-45c2-bd2b-06227ec1a581",
                        "parentUUID": "157be1f0-5ab2-4cb4-90d1-f99ffe481390",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "157be1f0-5ab2-4cb4-90d1-f99ffe481390",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3bcc2dbc-0f81-45c2-bd2b-06227ec1a581",
                        "parentUUID": "157be1f0-5ab2-4cb4-90d1-f99ffe481390",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "_getUserList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getUserList Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e03f0367-9493-4836-9fcc-fe7f2684c069",
                        "parentUUID": "29bcb080-578d-44b7-9aa0-7ad7c49addfd",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "29bcb080-578d-44b7-9aa0-7ad7c49addfd",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _getUserList Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e03f0367-9493-4836-9fcc-fe7f2684c069",
                        "parentUUID": "29bcb080-578d-44b7-9aa0-7ad7c49addfd",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "_loginUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
                        "fullTitle": "VocalAPI _loginUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.doLogin.returns(Rx.Observable.throw(errore));\napi._loginUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2cb6af96-dd0c-43f5-b2b7-4bc98907d069",
                        "parentUUID": "6d144e37-05cd-4b1d-bd6a-af9caf5d6da2",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "6d144e37-05cd-4b1d-bd6a-af9caf5d6da2",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
                        "fullTitle": "VocalAPI _loginUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.doLogin.returns(Rx.Observable.throw(errore));\napi._loginUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2cb6af96-dd0c-43f5-b2b7-4bc98907d069",
                        "parentUUID": "6d144e37-05cd-4b1d-bd6a-af9caf5d6da2",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "queryLambda",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e9be47bb-b3a8-40d2-a705-9f34c224d4db",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0d2db1ce-12e6-423b-972b-919d74a62c27",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c17cffc9-cbb0-4262-a727-5e3883ebd21d",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0258c1f8-cc77-47eb-adb8-de39de1ed05e",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7a71e6a7-3ef0-490e-96cb-82d6a0784c21",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ceb5e112-a980-4e35-9588-2de71d9e751d",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUserList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUserList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUserList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUserList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d0d6e44e-17fe-4e16-99d4-030961a873a7",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
                        "timedOut": true,
                        "duration": 2000,
                        "state": "failed",
                        "pass": false,
                        "fail": true,
                        "pending": false,
                        "code": "api._loginUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_loginUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._loginUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._loginUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {
                          "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
                        },
                        "isRoot": false,
                        "uuid": "eee55e6f-64f1-4cf9-b5c3-2a93ce2c937c",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "02528382-11e8-436f-a85a-883661b030ff",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d5a7ad63-3857-44ef-8e15-fcc681004fe2",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
                        "timedOut": true,
                        "duration": 2000,
                        "state": "failed",
                        "pass": false,
                        "fail": true,
                        "pending": false,
                        "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {
                          "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
                        },
                        "isRoot": false,
                        "uuid": "50564916-2705-43b7-b023-723f28e84fca",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f5152a41-73c4-427a-86df-1264e6428b89",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f6601963-6104-4bc6-acd0-d60c4db4978f",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          };\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3920593b-60d8-4173-90c0-00fa78228d6d",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe586a9b-9cfb-47e5-8060-efe54dcc13b2",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "179debc5-0ca0-411a-b89f-e6a063daea36",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7d70b15-1a25-4000-a623-4adc4e0c8864",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "577517dd-c6b0-48e0-a430-b36a99b215f5",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "26702530-3986-48a5-8b1f-4337b93ff030",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e21f911-412e-4774-81f8-6a3f6ac81405",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0c621c18-c68d-4171-ad1b-cc81b59732b6",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "62e5fe6d-ec9f-4f79-ad57-4563b2fcec3c",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": true,
                        "duration": 2001,
                        "state": "failed",
                        "pass": false,
                        "fail": true,
                        "pending": false,
                        "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {
                          "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
                        },
                        "isRoot": false,
                        "uuid": "c0ac97e5-01a4-459e-bf68-0ffb06b44d76",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "45163cfe-77e8-404f-a3f6-9e5d25852876",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7940c317-be8f-4d95-adc6-4ecf313a3d69",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
                        "fullTitle": "VocalAPI queryLambda Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n\texpect(response).have.property('statusCode', 200);\n\tdone();\n};\napi.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7d22f55f-8de9-411f-a188-5a3e159a15d3",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e9be47bb-b3a8-40d2-a705-9f34c224d4db",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0d2db1ce-12e6-423b-972b-919d74a62c27",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c17cffc9-cbb0-4262-a727-5e3883ebd21d",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0258c1f8-cc77-47eb-adb8-de39de1ed05e",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7a71e6a7-3ef0-490e-96cb-82d6a0784c21",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ceb5e112-a980-4e35-9588-2de71d9e751d",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUserList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUserList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUserList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUserList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d0d6e44e-17fe-4e16-99d4-030961a873a7",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "02528382-11e8-436f-a85a-883661b030ff",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d5a7ad63-3857-44ef-8e15-fcc681004fe2",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f5152a41-73c4-427a-86df-1264e6428b89",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f6601963-6104-4bc6-acd0-d60c4db4978f",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          };\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3920593b-60d8-4173-90c0-00fa78228d6d",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe586a9b-9cfb-47e5-8060-efe54dcc13b2",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "179debc5-0ca0-411a-b89f-e6a063daea36",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7d70b15-1a25-4000-a623-4adc4e0c8864",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "577517dd-c6b0-48e0-a430-b36a99b215f5",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "26702530-3986-48a5-8b1f-4337b93ff030",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e21f911-412e-4774-81f8-6a3f6ac81405",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0c621c18-c68d-4171-ad1b-cc81b59732b6",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "62e5fe6d-ec9f-4f79-ad57-4563b2fcec3c",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "45163cfe-77e8-404f-a3f6-9e5d25852876",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7940c317-be8f-4d95-adc6-4ecf313a3d69",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
                        "fullTitle": "VocalAPI queryLambda Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n\texpect(response).have.property('statusCode', 200);\n\tdone();\n};\napi.queryLambda(event, context);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7d22f55f-8de9-411f-a188-5a3e159a15d3",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      }
                    ],
                    "failures": [
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
                        "timedOut": true,
                        "duration": 2000,
                        "state": "failed",
                        "pass": false,
                        "fail": true,
                        "pending": false,
                        "code": "api._loginUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_loginUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._loginUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._loginUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {
                          "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
                        },
                        "isRoot": false,
                        "uuid": "eee55e6f-64f1-4cf9-b5c3-2a93ce2c937c",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
                        "fullTitle": "VocalAPI queryLambda Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
                        "timedOut": true,
                        "duration": 2000,
                        "state": "failed",
                        "pass": false,
                        "fail": true,
                        "pending": false,
                        "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {
                          "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
                        },
                        "isRoot": false,
                        "uuid": "50564916-2705-43b7-b023-723f28e84fca",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      },
                      {
                        "title": "Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "fullTitle": "VocalAPI queryLambda Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
                        "timedOut": true,
                        "duration": 2001,
                        "state": "failed",
                        "pass": false,
                        "fail": true,
                        "pending": false,
                        "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
                        "err": {
                          "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
                        },
                        "isRoot": false,
                        "uuid": "c0ac97e5-01a4-459e-bf68-0ffb06b44d76",
                        "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
                        "skipped": false
                      }
                    ],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 26,
                    "totalPasses": 23,
                    "totalFailures": 3,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": true,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 6028,
                    "rootEmpty": false
                  },
                  {
                    "title": "_removeRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _removeRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._removeRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6164b5aa-cbe7-4b99-8de0-527c13c04dfb",
                        "parentUUID": "7414a44c-cd25-4628-a939-b8c14ec206ef",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "7414a44c-cd25-4628-a939-b8c14ec206ef",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _removeRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._removeRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6164b5aa-cbe7-4b99-8de0-527c13c04dfb",
                        "parentUUID": "7414a44c-cd25-4628-a939-b8c14ec206ef",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 4,
                    "rootEmpty": false
                  },
                  {
                    "title": "_removeUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _removeUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._removeUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1366acd4-54ab-4fb3-b06b-7f7af4530b8b",
                        "parentUUID": "b204672a-88dc-4d7d-8a82-525ff9f20f21",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "b204672a-88dc-4d7d-8a82-525ff9f20f21",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _removeUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._removeUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1366acd4-54ab-4fb3-b06b-7f7af4530b8b",
                        "parentUUID": "b204672a-88dc-4d7d-8a82-525ff9f20f21",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "_resetUserEnrollment",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _resetUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.resetEnrollments.returns(Rx.Observable.throw(errore));\napi._resetUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0f3e30dd-da36-4ce0-b853-a7c78f26117f",
                        "parentUUID": "f7bbc907-3c7f-4875-bd3c-7368d7c20372",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "f7bbc907-3c7f-4875-bd3c-7368d7c20372",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _resetUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.resetEnrollments.returns(Rx.Observable.throw(errore));\napi._resetUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0f3e30dd-da36-4ce0-b853-a7c78f26117f",
                        "parentUUID": "f7bbc907-3c7f-4875-bd3c-7368d7c20372",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "_updateRule",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _updateRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._updateRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c008806e-3dae-4783-88c5-5108c410473c",
                        "parentUUID": "3f7a4964-796c-49fc-949b-6b5497f0e3e4",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "3f7a4964-796c-49fc-949b-6b5497f0e3e4",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _updateRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._updateRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c008806e-3dae-4783-88c5-5108c410473c",
                        "parentUUID": "3f7a4964-796c-49fc-949b-6b5497f0e3e4",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "_updateUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _updateUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._updateUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "af55b24f-0b28-4a2b-a729-614aabe5eab4",
                        "parentUUID": "e0027bec-1f86-4e5a-b778-599fadef77be",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalAPI.js",
                    "uuid": "e0027bec-1f86-4e5a-b778-599fadef77be",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                    "passes": [
                      {
                        "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "fullTitle": "VocalAPI _updateUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(errore));\napi._updateUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "af55b24f-0b28-4a2b-a729-614aabe5eab4",
                        "parentUUID": "e0027bec-1f86-4e5a-b778-599fadef77be",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_VocalAPI.js",
                "uuid": "c26a5695-5bac-49fa-b4a8-5b46d4ae36f0",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_VocalAPI.js",
            "uuid": "1245e438-a19b-41d0-bc37-e18e0353193e",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_VocalAPI.js",
        "uuid": "c7291b69-7336-4882-a74c-3252935f40bb",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalAPI.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Back-end",
        "suites": [
          {
            "title": "Users",
            "suites": [
              {
                "title": "VocalLoginMicrosoftModule",
                "suites": [
                  {
                    "title": "addEnrollment",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule addEnrollment Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.addEnrollment().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "21d74ef5-bcff-4ec0-97b8-066355ba0025",
                        "parentUUID": "22d0f8fc-99fc-4896-95d9-15117854e377",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "22d0f8fc-99fc-4896-95d9-15117854e377",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule addEnrollment Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.addEnrollment().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "21d74ef5-bcff-4ec0-97b8-066355ba0025",
                        "parentUUID": "22d0f8fc-99fc-4896-95d9-15117854e377",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  },
                  {
                    "title": "createUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule createUser Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.createUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9b0cd785-4086-44e0-8471-507707ae5934",
                        "parentUUID": "cd564caa-de06-4f4d-a345-925a55e76f54",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "cd564caa-de06-4f4d-a345-925a55e76f54",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule createUser Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.createUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9b0cd785-4086-44e0-8471-507707ae5934",
                        "parentUUID": "cd564caa-de06-4f4d-a345-925a55e76f54",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "deleteUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule deleteUser Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.deleteUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "46004f32-315f-4401-a645-01e1e64b87be",
                        "parentUUID": "b44f757b-06f8-4809-bad4-5a91709f600c",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "b44f757b-06f8-4809-bad4-5a91709f600c",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule deleteUser Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.deleteUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "46004f32-315f-4401-a645-01e1e64b87be",
                        "parentUUID": "b44f757b-06f8-4809-bad4-5a91709f600c",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "doLogin",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule doLogin Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject({ \"result\" : \"Reject\" }));\nmicrosoft_login.doLogin().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "115d1b30-517b-426a-a80c-b631e1a9cf59",
                        "parentUUID": "ec7f4af6-7c21-4174-9b25-39b2ee2a2907",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "ec7f4af6-7c21-4174-9b25-39b2ee2a2907",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule doLogin Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject({ \"result\" : \"Reject\" }));\nmicrosoft_login.doLogin().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "115d1b30-517b-426a-a80c-b631e1a9cf59",
                        "parentUUID": "ec7f4af6-7c21-4174-9b25-39b2ee2a2907",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 8,
                    "rootEmpty": false
                  },
                  {
                    "title": "getList",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule getList Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4acf7496-49a4-4f64-abe5-a01a4bdf3966",
                        "parentUUID": "87ae3466-151b-4856-831e-b19f3b57e4b6",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "87ae3466-151b-4856-831e-b19f3b57e4b6",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule getList Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4acf7496-49a4-4f64-abe5-a01a4bdf3966",
                        "parentUUID": "87ae3466-151b-4856-831e-b19f3b57e4b6",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "getUser",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule getUser Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n  {\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "02556f8d-d023-4d71-bb9c-3b5e96aeb5c0",
                        "parentUUID": "021dcfd3-efa1-4d09-a4f5-99e1e8770480",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "021dcfd3-efa1-4d09-a4f5-99e1e8770480",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule getUser Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n  {\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "02556f8d-d023-4d71-bb9c-3b5e96aeb5c0",
                        "parentUUID": "021dcfd3-efa1-4d09-a4f5-99e1e8770480",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 2,
                    "rootEmpty": false
                  },
                  {
                    "title": "resetEnrollments",
                    "suites": [],
                    "tests": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule resetEnrollments Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.resetEnrollments().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3e78da8-834c-433e-b156-03a4b4aa5a05",
                        "parentUUID": "dab3d1f9-ee78-4886-85c5-61147dc1fcb1",
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "uuid": "dab3d1f9-ee78-4886-85c5-61147dc1fcb1",
                    "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                    "passes": [
                      {
                        "title": "Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "fullTitle": "VocalLoginMicrosoftModule resetEnrollments Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.resetEnrollments().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3e78da8-834c-433e-b156-03a4b4aa5a05",
                        "parentUUID": "dab3d1f9-ee78-4886-85c5-61147dc1fcb1",
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 1,
                    "totalPasses": 1,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 3,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
                "uuid": "c1ab16fd-e4d7-478e-8d6c-4e5ffd951049",
                "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
            "uuid": "80ebd517-8a4e-442a-8090-1b5c94bf4f8a",
            "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\src\\test\\test_VocalLoginMicrosoftModule.js",
        "uuid": "7f525469-eede-4ba4-989e-1e5643759d87",
        "fullFile": "H:\\src\\git\\AtAVi\\src\\test\\test_VocalLoginMicrosoftModule.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "2cd99c5a-fb80-4f48-8e4e-e92df1081994",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
      "fullTitle": "webhook La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "jwt.verify.returns(1);\nservice.webhook(ev, { succeed: function(res) { expect(res.statusCode).to.equal(200); done(); }});",
      "err": {
        "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:72:17)\n"
      },
      "isRoot": false,
      "uuid": "2d5a2027-bd8a-4eea-b514-7611333dc194",
      "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
      "skipped": false
    },
    {
      "title": "La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
      "fullTitle": "webhook La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "jwt.verify.throws();\nservice.webhook(ev, { succeed: function(res)\n{\n  let body = JSON.parse(res.body);\n  expect(body.data._status).to.equal(403);\n  done();\n}});",
      "err": {
        "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:78:17)\n"
      },
      "isRoot": false,
      "uuid": "47923f23-8044-4ac7-84a5-5aa854f730e5",
      "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addAgent Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode:400, msg:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "323df3b3-ed51-4e2a-9304-88849a3d0e5b",
      "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addAgent Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "06edb568-7970-48b4-a45c-976077ef2d71",
      "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getAgent Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "7f19c384-de7b-4c99-abbf-36b6c8e8234d",
      "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getAgent Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = agents.getAgent('mock_name');\nobservable.subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield(null, {Item: {mock_agent}});\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a9f94659-f673-41e2-8a02-a82ddcf1ed14",
      "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getAgentList Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '2'});\ndynamo_client.scan.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "4d1d717f-fcbe-478e-a381-5b53601ada0b",
      "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getAgentList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent]}); // Ultimo elemento da ottenere\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e08ca80c-2ca7-47d1-b513-6971eabf39b7",
      "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeAgent Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, msg:\"error removing rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "d298e2be-44aa-4561-aca8-d83922a6ef69",
      "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "removeAgent Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, msg:\"success\"});\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "92dabb8f-ebe5-4e8d-852c-a00784491d2e",
      "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateAgent Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, msg:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "ef631d93-7562-4059-94e4-4388897b154d",
      "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateAgent Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, mock_agent);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c7b7d4c3-fefb-47df-95ef-58007d409a92",
      "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
      "fullTitle": "query Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "RequestPromise.returns(Promise.resolve(response));\nadapter.query(query).then(function(data)\n\t\t\t\t\t{\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "29b5ccf9-c97a-42bb-8779-81157c19139a",
      "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
      "skipped": false
    },
    {
      "title": "Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
      "fullTitle": "query Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//sarebbero da aggiungere i singoli casi (status code, data.statusCode, ecc)\nRequestPromise.returns(Promise.resolve(error));\nadapter.query(query).then(done).catch(function(err){done();});",
      "err": {},
      "isRoot": false,
      "uuid": "3e358c25-16ae-48bd-a1a0-b66dc7bd35ee",
      "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addConversation Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({ statusCode : 400, message : \"Requested resource not found\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "5668bdfd-c977-4457-8117-551210a0aeac",
      "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
      "fullTitle": "addConversation Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "7a38e270-a340-4edf-9fa6-9f62384fce9c",
      "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addMessage Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield({ statusCode : 500, message : \"error adding message\" });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "368ca2cb-2c11-46ce-914b-22278d5221c2",
      "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "addMessage Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield(null,{});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "bc373be5-705e-46cc-8c7a-b0409ac0dac0",
      "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "getConversation Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield({ statusCode  :500, message : \"error downloading conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "4f3caf75-bc54-4edc-9b6f-8ff2f19cd364",
      "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getConversation Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, mock_conv);\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.Item.session_id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "157cb40b-76b0-4ffa-914e-2a4561400385",
      "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getConversationList Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversationList().subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\ndynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2],LastEvaluatedKey:3});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\tcallNext = next.getCall(1);\nexpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "deaca613-014c-4192-b897-34fe8a71ecbe",
      "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getConversationList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversationList().subscribe(\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnext: next,\n  \t\t\t\t\t\terror: error,\n  \t\t\t\t\t\tcomplete: complete\n  \t\t\t\t\t});\n  dynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2]});\n  expect(error.callCount).to.equal(0);\n  expect(next.callCount).to.equal(2);\n\t\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\n  expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5b128857-9589-48f7-9090-1d3446fa8623",
      "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "removeConversation Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "6edf9515-761a-4cbd-bfd6-48de37ad0e83",
      "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "removeConversation Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c352c821-931d-42fa-b5d3-2b541cf09beb",
      "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
      "skipped": false
    },
    {
      "title": "La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
      "fullTitle": "webhook La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "body.result.action = 'user.check';\nlet ev = {body: JSON.stringify(body)};\nusers_DAO.getUserList.returns(Rx.Observable.of({ name : \"Mauro Carlin\", username : \"mou\"}));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\n//expect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'admin');",
      "err": {},
      "isRoot": false,
      "uuid": "809d7d6d-f37c-4b0e-bae0-e2254b96a1ea",
      "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
      "skipped": false
    },
    {
      "title": "La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
      "fullTitle": "webhook La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "body.result.action = 'guest.check';\nlet ev = {body: JSON.stringify(body)};\nguests_DAO.getGuestList.returns(Rx.Observable.of([{ name : \"Mauro Carlin\", username : \"mou\", company : \"Google\"}]));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\nexpect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'welcome');",
      "err": {},
      "isRoot": false,
      "uuid": "5a70baa2-af0b-4740-809d-fcdac967b827",
      "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
      "skipped": false
    },
    {
      "title": "Deve sollevare un'eccezione se viene chiamato.",
      "fullTitle": "next Deve sollevare un'eccezione se viene chiamato.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(obs.next.bind(obs)).to.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "cc60460d-6efe-4cc6-a304-41eab39865e1",
      "parentUUID": "b312ec6d-2e5f-4bd2-a195-33ee58376e0b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addGuest Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addGuest().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "753dbb52-26d3-4f90-b1f6-70561c4a8a3b",
      "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "addGuest Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addGuest('mauro','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8c5fba9d-c2c2-463b-92dc-3ec00fcbb05a",
      "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "getGuest Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n          {\n            next: next,\n            error: error,\n            complete: complete\n          });\n          dynamo_client.get.yield({ statusCode : 500, message : \"error getting data\" });\n          expect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b262d94a-d279-4046-9e36-43a0a6ecb5a8",
      "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getGuest Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, { Item:{name : \"Mauro\", company : \"Zero12\" }});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal( \"Mauro\");\n\t\t\t\t\texpect(callNext.args[0].company).to.equal(\"Zero12\");\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "60c965d0-1766-48ef-bb55-6f004ab99351",
      "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "getGuestList Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Piero\", company : \"Google\" }], LastEvaluatedKey: 'Luca'});\ndynamo_client.scan.yield({ statusCode : 500 });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8776d3d8-1043-42f1-8b31-5b814cd33129",
      "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getGuestList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{name : \"Piero\", company : \"Google\" }]});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1fef49e6-822a-42d7-b42b-8826debe5cf0",
      "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "removeGuest Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.removeGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing guest\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8d25fdf0-1be4-4750-ac84-15b3e8ba4888",
      "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "removeGuest Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.removeGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e86c864f-323d-451d-9ad0-047bd5ce7dda",
      "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "updateGuest Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.updateGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating guest\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "3371d654-5c3b-42d2-a4ab-537d8da7f4c3",
      "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "updateGuest Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.updateGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6670ef9b-b7da-4ea5-bd1c-3ef6f8f68588",
      "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addConversation Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield({ statusCode: 500 }, null);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "544e1ed9-7c43-41ee-963c-c821171d7fc7",
      "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "addConversation Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield(null, { Attributes: {conversations: [1,2] }});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "580adbdf-8ace-47a3-ab2d-40cff2ba6a99",
      "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
      "skipped": false
    },
    {
      "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "fullTitle": "addMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.addMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "67b8b705-9b39-436d-876d-fc1258636321",
      "parentUUID": "9620d65a-bd4b-4e12-ba9f-cf08728b82cf",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
      "fullTitle": "getMember Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Docs: https://api.slack.com/methods/users.info\nlet res =\n{\n\t'ok': true,\n\t'user':\n\t{\n\t\t'id': 'U023BECGF',\n\t\t'name': 'bobby',\n\t\t'deleted': false,\n\t\t'color': '9f69e7',\n\t\t'profile':\n\t\t{\n\t\t\t'avatar_hash': 'ge3b51ca72de',\n\t\t\t'current_status': ':mountain_railway: riding a train',\n\t\t\t'first_name': 'Bobby',\n\t\t\t'last_name': 'Tables',\n\t\t\t'real_name': 'Bobby Tables',\n\t\t\t'email': 'bobby@slack.com',\n\t\t\t'skype': 'my-skype-name',\n\t\t\t'phone': '+1 (123) 456 7890'\n\t\t},\n\t\t'is_admin': true,\n\t\t'is_owner': true,\n\t\t'updated': 1490054400,\n\t\t'has_2fa': true\n\t}\n};\nweb_client.users.info.yield(null, res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].id).to.equal(res.user.id);\nexpect(callNext.args[0].name).to.equal(res.user.name);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "375c8d11-bc06-4ac8-8244-21c9fbfc83c3",
      "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
      "skipped": false
    },
    {
      "title": "Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "fullTitle": "getMember Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.info.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "1fad7301-530a-4f1b-aee9-2f7a7858bd77",
      "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
      "skipped": false
    },
    {
      "title": "L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
      "fullTitle": "getMemberList L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nlet res =\n{\n\t\"ok\": true,\n\t\"members\":\n\t[\n\t\t{\n\t\t\t\"id\": \"U023BECGF\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"mauro\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Mauro Bocciofilo\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\"\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"U023BECLL\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"bobby\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\",\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t}\n\t]\n}\nweb_client.users.list.yield(null,res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].members[0].id).to.equal(res.members[0].id);\nexpect(callNext.args[0].members[0].name).to.equal(res.members[0].name);\nexpect(callNext.args[0].members[1].id).to.equal(res.members[1].id);\nexpect(callNext.args[0].members[1].name).to.equal(res.members[1].name);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6a4197ec-c29f-4653-982b-2731b5650a78",
      "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
      "skipped": false
    },
    {
      "title": "Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "fullTitle": "getMemberList Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.list.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "f535844e-2430-47fc-b33d-d47b15b1b096",
      "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
      "skipped": false
    },
    {
      "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "fullTitle": "removeMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.removeMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b3e3371d-9288-4bdd-8dd7-4592988c5cbb",
      "parentUUID": "262f348a-b96e-47bf-b040-a54baf6a0849",
      "skipped": false
    },
    {
      "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "fullTitle": "updateMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.updateMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "63451431-bb02-4a30-8895-0fd1a19a8473",
      "parentUUID": "172fd663-3c3c-4e85-9e46-26a3184907bc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: ''};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields('errore');\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 500);\n  done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "193b13c0-c7fb-4e69-889f-940987b019db",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields(null, groups);\n          client.users.list.yields('errore');\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
      "err": {},
      "isRoot": false,
      "uuid": "2156a6ac-1c2b-4366-ba8e-418bcff81951",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields('errore');\n          client.users.list.yields(null, users);\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
      "err": {},
      "isRoot": false,
      "uuid": "d8c15434-9efe-4724-a587-716172c2bfa7",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
      "fullTitle": "getChannelList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: null};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields(null, channels);\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 200);\n  done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "7342ee25-ef4a-44f6-9843-7b66f537919d",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "sendMsg Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield('errore');\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "ae0ceb3d-f4da-4b11-ba0d-aa27a37595c1",
      "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "sendMsg Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield(null, responseSendMsg);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "766cab3f-44ee-47b9-a7ec-306059516b65",
      "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "fullTitle": "sendMsg Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: JSON.stringify(bad_request)};\nservice.sendMsg(ev, context);\n\nexpect(context.succeed.callCount).to.equal(1);\t\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "cdcf8f35-5178-4b82-9894-0b963eca8740",
      "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
      "skipped": false
    },
    {
      "title": "Deve chiamare complete_cb",
      "fullTitle": "complete Deve chiamare complete_cb",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount, \"il callback di complete non è stato chiamato esattamente una volta.\").to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "164b4e50-d696-451e-860c-72375fd7a329",
      "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
      "skipped": false
    },
    {
      "title": "Non deve chiamare complete_cb se l'observer è in pausa",
      "fullTitle": "complete Non deve chiamare complete_cb se l'observer è in pausa",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onComplete(success);\nobs.pause();\nobs.complete();\nexpect(success.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b4de0c6d-5cf4-4313-993b-3189d5ec1724",
      "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
      "skipped": false
    },
    {
      "title": "Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "fullTitle": "complete Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount).to.equal(1);\nobs.pause();\n        obs.complete();\n        expect(success.callCount).to.equal(1);\nobs.resume();\n        expect(success.callCount).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "f48a24c6-305f-45a2-a75f-1bbd55fc4a41",
      "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
      "skipped": false
    },
    {
      "title": "Deve chiamare error_cb",
      "fullTitle": "error Deve chiamare error_cb",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        let call = success.getCall(0);\n\n        expect(success.callCount).to.equal(1);\n        expect(call.args[0]).to.equal(err);",
      "err": {},
      "isRoot": false,
      "uuid": "da3569fc-a24e-441b-a2f4-8829e6eec349",
      "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
      "skipped": false
    },
    {
      "title": "Non deve chiamare error_cb se l'observer è in pausa",
      "fullTitle": "error Non deve chiamare error_cb se l'observer è in pausa",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onError(success);\nobs.pause();\nobs.error('errore');\n        expect(success.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "65e1072f-f459-42dc-8f7c-9db51ff6fc20",
      "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
      "skipped": false
    },
    {
      "title": "Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "fullTitle": "error Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.pause();\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(2);\n        let call = success.getCall(1);\n        expect(call.args[0]).to.equal(err);",
      "err": {},
      "isRoot": false,
      "uuid": "13860a7e-713e-449d-94c9-71a7e65b7b4f",
      "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
      "skipped": false
    },
    {
      "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
      "fullTitle": "next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nlet call = success.getCall(0);\nexpect(call.args[0]).to.equal('data');",
      "err": {},
      "isRoot": false,
      "uuid": "8cb58066-4208-4eac-90c2-ee97394123bb",
      "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
      "skipped": false
    },
    {
      "title": "Non deve chiamare next_cb se l'observer è in pausa",
      "fullTitle": "next Non deve chiamare next_cb se l'observer è in pausa",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onNext(success);\nobs.pause();\nobs.next('Function called');\nexpect(success.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "3a79d872-a40c-4c3c-8e5b-dc6efc2b3252",
      "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
      "skipped": false
    },
    {
      "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
      "fullTitle": "next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.pause();\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(1);\nobs.next('other data');\nexpect(success.callCount).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "bf55b7ae-26fa-4b00-9585-a3fdf3edbb10",
      "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addRule Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.addRule(mock_rule).subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "934e4d87-01be-444f-acf3-15460f34536a",
      "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addRule Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.addRule(mock_rule).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "503cfc1b-beba-4010-8279-0dcd837d9f20",
      "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getRule Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.getRule(1).subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n        expect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "21dc619c-91e6-40c6-ad11-1442868ac06e",
      "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getRule Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = rules.getRule(1);\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_rule);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.Item.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "345df0f6-fa34-4840-94b1-b70d9eb5d099",
      "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getRuleList Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2],LastEvaluatedKey:3});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "d4a87f6a-2a70-4e9c-8324-3218f7b80b41",
      "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getRuleList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "03a52eed-d228-4ce0-ba73-bf66dd2c67eb",
      "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getRuleList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//da definire",
      "err": {},
      "isRoot": false,
      "uuid": "85e87854-923e-4963-bc32-c5b333ff66bb",
      "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeRule Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "bced9eb7-0935-4d60-9908-f9ccfb02dead",
      "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "removeRule Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e3e011d3-501d-46f6-9b90-1cdb72936702",
      "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateRule Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "5c7da28f-01a5-43d5-b23d-da7e128d55a8",
      "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateRule Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "447686e3-caa4-44c9-ad92-ec66ddf71e3d",
      "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "fullTitle": "addRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: \"\"};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "1674d18a-5a83-4caf-8846-12583e8cd6c0",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "addRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "de153504-a563-4490-a27b-661ae53e130a",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "addRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.empty());\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "6b942434-fc86-4f3c-9e37-9538706a122d",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "fullTitle": "addRule Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { body: JSON.stringify(rule) };\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
      "err": {},
      "isRoot": false,
      "uuid": "24d0af1b-2539-48ca-8e56-1ac8af8f5f8c",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "deleteRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.removeRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "361ad7bf-ee31-49ea-bf21-9bc46909f363",
      "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "deleteRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.removeRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "70f32ba1-df22-443b-9957-30963e0ca8b2",
      "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "fullTitle": "deleteRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "{\n  rulesDAO.removeRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\n  let ev = {pathParameters: { id: 1 }};\n  rules.deleteRule(ev, context);\n  let call = context.succeed.getCall(0);\n  expect(context.succeed.calledOnce).to.be.true;\n  expect(call.args[0]).not.to.be.null;\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 404);\n};",
      "err": {},
      "isRoot": false,
      "uuid": "80eed219-b4c0-4c48-9cab-b2d5962fcae1",
      "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
      "fullTitle": "getRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRule.returns(Rx.Observable.of(rule));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify(rule));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "dd96d9e9-73ad-4b34-8c50-913c43728867",
      "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "8c54c567-b5e3-4e35-b84c-e47a0f9f381b",
      "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "fullTitle": "getRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRule.returns(Rx.Observable.throw({ code: 'Not found' }));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
      "err": {},
      "isRoot": false,
      "uuid": "749eb433-b190-4ec6-9811-771631eb928d",
      "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
      "fullTitle": "getRuleList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRuleList.returns(Rx.Observable.of(rule_1, rule_2));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ rules: [rule_1, rule_2] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "24a91b29-1fb3-456d-89a1-b84f022bbe85",
      "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getRuleList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRuleList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "02c0b11a-ac3d-4d15-9285-a93c10989d27",
      "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
      "fullTitle": "getTaskList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "taskDAO.getTaskList.returns(Rx.Observable.of(task_1));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ tasks: [task_1] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "de0c99e0-dc0b-4bb3-b240-aa39ffb3253f",
      "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getTaskList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "taskDAO.getTaskList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "a341108f-a681-4925-be66-f3b2e866edd0",
      "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "updateRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.updateRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "707839fe-6576-4a1f-bb39-718966de647a",
      "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "fullTitle": "updateRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: \"\" , body: \"\"};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "61296071-82c7-481b-bb79-aa83e584e793",
      "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "updateRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "5b610349-3571-45f4-8a04-a13584e3c7b9",
      "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
      "skipped": false
    },
    {
      "title": "Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
      "fullTitle": "speechToText Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let reject = sinon.stub();\nlet promise = watson.speechToText();\npromise.catch(reject);\ndone();\nexpect(reject.callCount).to.equal(1);\nlet call = reject.getCall(0);\nexpect(call.args[0]).to.deep.equal({code: 500});",
      "err": {},
      "isRoot": false,
      "uuid": "3c0189b2-57ed-4624-b102-f0f3368eca31",
      "parentUUID": "c2a6a27f-970f-4b54-aac1-55dab2da64e9",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addTask Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.addTask(mock_task).subscribe(\n\t\t\t\t\t{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "5bac7e4d-6ace-419b-b143-e9926c97fd91",
      "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addTask Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.addTask(mock_task).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "42f93b22-bdc4-4875-b595-5023c1452e15",
      "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getTask Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.getTask('mock_type').subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "3cfd4d56-7c37-4a09-aad0-501abbaa9130",
      "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getTask Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = tasks.getTask('mock_type');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_task);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.Item.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "cec36c77-a3a1-478d-8ef1-e9188d14c3cf",
      "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getTaskList Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{mock_task}], LastEvaluatedKey: \"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items: [{mock_task2}], LastEvaluatedKey: \"mock_type3\"});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b7ea70d0-04f4-4cf0-928b-61b8ce7b6a55",
      "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getTaskList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task],LastEvaluatedKey:\"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8f938647-2fef-4dbb-a072-6318ef9cad47",
      "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeTask Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "1243fdb4-4787-4a29-b7ad-282b21e87191",
      "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "removeTask Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "659e1a19-d564-46bf-b881-4dc2187ad8fc",
      "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateTask Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n  \t\t\t\t\terror: error,\n  \t\t\t\t\tcomplete: complete\n  \t\t\t\t});\n  \t\t\t\t\tdynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\n\texpect(error.callCount).to.equal(1);\n\tlet callError = error.getCall(0);\n\texpect(callError.args[0].statusCode).to.equal(500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8504f966-68d3-4836-81ad-ad5cada735c1",
      "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateTask Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "28aa9f5a-915d-4b3a-acaa-dfaec7c73215",
      "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addUser Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.addUser('mou').subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\n\t\t\t\t\t//TableName: [nome tabella che non esiste]\n\t\t\t\t\tdynamo_client.put.yield({statusCode: 400, message:\"Requested resource not found\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "2433a75a-55dc-4c45-8002-333e240b3fed",
      "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addUser Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.addUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "71d8a601-23b5-4b1c-aab0-15532fba3a8c",
      "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getUser Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode: 500, message:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8e647fbb-14a2-4528-a7ea-0cce4231b29a",
      "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUser Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = users.getUser('mou');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.get.yield(null, {Item: {name: \"mauro\", username: \"mou\"}});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal('mauro');\n\t\t\t\t\texpect(callNext.args[0].username).to.equal('mou');\n\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "71b1ff63-6baf-48f8-a201-3fd68b3fcb3a",
      "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getUserList Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}], LastEvaluatedKey: 'marco'});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\n\n          expect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "a3e8042e-1b92-41b5-97a5-34db559918b1",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUserList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5a305065-883c-4efc-957a-001b810df4a2",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let query =\n{\n\tname: 'mauro'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
      "err": {},
      "isRoot": false,
      "uuid": "a249c586-c79d-4f2b-abf2-acd05ccd7b26",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let query =\n{\n\tname: 'mauro',\n\tslack_channel: 'channel'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name and slack_channel = :slack_channel');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:slack_channel', 'channel' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
      "err": {},
      "isRoot": false,
      "uuid": "f776324b-dd8c-4398-b072-c422452452ba",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeUser Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.delete.yield({statusCode: 500, message: \"error removing user\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "70ecaf17-d8cc-4dcc-8e66-fbc752b593e0",
      "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
      "fullTitle": "removeUser Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "24cd4871-5284-4146-9984-f989a46d6967",
      "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateUser Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message: \"error updating user\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "12dec5a4-3114-4254-8c1b-4de61a05c51c",
      "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateUser Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "cf1757ff-525d-4351-9cc1-af9d61d15f5d",
      "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "addUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "584e0bde-9cbe-474b-9b6f-f910cb839772",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "fullTitle": "addUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.empty());\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "4c7de136-9b70-4865-a84b-e86ac58eb34c",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "fullTitle": "addUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\n          let ev = { body: \"\" };\n          service.addUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "dcf6e942-f678-4f00-8a8e-8bf44321913c",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "fullTitle": "addUser Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
      "err": {},
      "isRoot": false,
      "uuid": "ffc49c2b-e8f8-4489-86d6-d22d9e60a775",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "deleteUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.removeUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "527798db-4117-4d43-9e24-bb78024275f7",
      "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "fullTitle": "deleteUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.removeUser.returns(Rx.Observable.empty());\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "2af69d0c-4bea-4975-87ce-4e145481423d",
      "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "fullTitle": "deleteUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.removeUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { pathParameters: { username: 'pippo' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
      "err": {},
      "isRoot": false,
      "uuid": "9e0ac3ba-43b5-48b4-a156-aacacd78c0a9",
      "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "getUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "9ba417d8-2bba-4ca1-a11c-f523c4794c8d",
      "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
      "fullTitle": "getUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUser.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ name : 'Mauro', username : 'mou' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "c4fa0022-1aba-435b-bbe9-92af173cecf2",
      "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "fullTitle": "getUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUser.returns(Rx.Observable.throw({ code: 'Not found' }));\n          let ev = { pathParameters: { username: 'pippo'} };\n          service.getUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
      "err": {},
      "isRoot": false,
      "uuid": "13fb6b81-085c-4919-a6aa-c34c43a07112",
      "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "getUserList Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUserList.returns(Rx.Observable.throw(new Error()));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "70819cd4-26ac-494c-9a6a-364c9f708a56",
      "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
      "fullTitle": "getUserList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUserList.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ users: [{ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "427574cc-a0b2-4674-85ed-98eb964196f4",
      "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "updateUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.updateUser.returns(Rx.Observable.throw(new Error()));\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "332976fa-5130-40b7-8f05-0453f492dafe",
      "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "fullTitle": "updateUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.updateUser.returns(Rx.Observable.empty());\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "61c99b34-10db-4968-8d2e-7717a326d5e6",
      "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "fullTitle": "updateUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = { pathParameters: \"\", body: \"\" };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "4f17a565-39dc-45d1-9026-de65d6850c53",
      "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.reject(JSON.stringify(notifications_error)));\nconversations.addMessage.returns(Rx.Observable.throw(new Error()));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "445aa1eb-908a-4bc9-a1e1-fa54c2a5caa9",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.reject(JSON.stringify(rules_error)));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "fdde9ab2-e797-4b53-8eb3-532a66ae2a8b",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'msg': 'error getting guest' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "5adb5032-e2b4-48f4-9355-909020f3b1da",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nconversations.addConversation.yield({ 'msg': 'error adding conversation' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "22ecbdd2-e85b-4695-bd0c-2a8d97a51537",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
      "fullTitle": "onMessage Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.resolve(JSON.stringify(notifications_response)));\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'type': 'example' });\nconversations.addConversation.yield(null, {});\nexpect(callback.callCount).to.equal(1);\nexpect(callback.getCall(0).args[0]).to.be.null;\nexpect(callback.getCall(0).args[1]).to.not.be.null;",
      "err": {},
      "isRoot": false,
      "uuid": "459505e4-3403-4fcb-8c5d-34125494bd74",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
      "fullTitle": "query Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.resolve(res_body));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\texpect(agents.getAgent.callCount).to.equal(1);\n\texpect(agents.getAgent.calledWith('test'));\n\tlet result = context.succeed.getCall(0).args[0];\n            expect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(200);\n            done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "226cf9e1-13b9-4856-a032-040122b5641b",
      "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
      "skipped": false
    },
    {
      "title": "Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
      "fullTitle": "query Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.reject(error));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\tlet result = context.succeed.getCall(0).args[0];\n\texpect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(412);\n            done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9e8e83cb-5035-4258-8a63-7e375bf0da82",
      "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_addRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._addRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "29caa929-a0f0-4dde-b8c0-65472fc4cc40",
      "parentUUID": "9daec29c-268a-4c98-88ed-d54afc57c5b9",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_addUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._addUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9ec12e84-282b-4290-8c1d-08f49a54fd3a",
      "parentUUID": "9f7c5468-bd18-461e-aec0-24783382a75b",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_addUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.addEnrollment.returns(Rx.Observable.throw(errore));\napi._addUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "55d2c52c-f810-4ac8-ac11-a6cb50c8c8e2",
      "parentUUID": "db0e07f5-b977-44d4-bdfd-cfa75e777175",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getRule(5).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "66bcaf1d-f8e5-4520-a7dc-8ab14b474f47",
      "parentUUID": "b6a175e2-678e-438c-88ba-ea67fc2550de",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getRuleList Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getRuleList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c4da9def-8688-417c-9f3a-38db852bbf48",
      "parentUUID": "8623eed6-bd3a-408a-bdab-618a75deccec",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3bcc2dbc-0f81-45c2-bd2b-06227ec1a581",
      "parentUUID": "157be1f0-5ab2-4cb4-90d1-f99ffe481390",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getUserList Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e03f0367-9493-4836-9fcc-fe7f2684c069",
      "parentUUID": "29bcb080-578d-44b7-9aa0-7ad7c49addfd",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
      "fullTitle": "_loginUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.doLogin.returns(Rx.Observable.throw(errore));\napi._loginUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2cb6af96-dd0c-43f5-b2b7-4bc98907d069",
      "parentUUID": "6d144e37-05cd-4b1d-bd6a-af9caf5d6da2",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "e9be47bb-b3a8-40d2-a705-9f34c224d4db",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "0d2db1ce-12e6-423b-972b-919d74a62c27",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "c17cffc9-cbb0-4262-a727-5e3883ebd21d",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "0258c1f8-cc77-47eb-adb8-de39de1ed05e",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "7a71e6a7-3ef0-490e-96cb-82d6a0784c21",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "ceb5e112-a980-4e35-9588-2de71d9e751d",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUserList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUserList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUserList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUserList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "d0d6e44e-17fe-4e16-99d4-030961a873a7",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
      "timedOut": true,
      "duration": 2000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api._loginUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_loginUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._loginUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._loginUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
      },
      "isRoot": false,
      "uuid": "eee55e6f-64f1-4cf9-b5c3-2a93ce2c937c",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "02528382-11e8-436f-a85a-883661b030ff",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "d5a7ad63-3857-44ef-8e15-fcc681004fe2",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
      "timedOut": true,
      "duration": 2000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
      },
      "isRoot": false,
      "uuid": "50564916-2705-43b7-b023-723f28e84fca",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "f5152a41-73c4-427a-86df-1264e6428b89",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "f6601963-6104-4bc6-acd0-d60c4db4978f",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          };\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "3920593b-60d8-4173-90c0-00fa78228d6d",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "fe586a9b-9cfb-47e5-8060-efe54dcc13b2",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "179debc5-0ca0-411a-b89f-e6a063daea36",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "c7d70b15-1a25-4000-a623-4adc4e0c8864",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "577517dd-c6b0-48e0-a430-b36a99b215f5",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "26702530-3986-48a5-8b1f-4337b93ff030",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "3e21f911-412e-4774-81f8-6a3f6ac81405",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "0c621c18-c68d-4171-ad1b-cc81b59732b6",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "62e5fe6d-ec9f-4f79-ad57-4563b2fcec3c",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": true,
      "duration": 2001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
      },
      "isRoot": false,
      "uuid": "c0ac97e5-01a4-459e-bf68-0ffb06b44d76",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "45163cfe-77e8-404f-a3f6-9e5d25852876",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "7940c317-be8f-4d95-adc6-4ecf313a3d69",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
      "fullTitle": "queryLambda Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n\texpect(response).have.property('statusCode', 200);\n\tdone();\n};\napi.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "7d22f55f-8de9-411f-a188-5a3e159a15d3",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_removeRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._removeRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6164b5aa-cbe7-4b99-8de0-527c13c04dfb",
      "parentUUID": "7414a44c-cd25-4628-a939-b8c14ec206ef",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_removeUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._removeUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1366acd4-54ab-4fb3-b06b-7f7af4530b8b",
      "parentUUID": "b204672a-88dc-4d7d-8a82-525ff9f20f21",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_resetUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.resetEnrollments.returns(Rx.Observable.throw(errore));\napi._resetUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0f3e30dd-da36-4ce0-b853-a7c78f26117f",
      "parentUUID": "f7bbc907-3c7f-4875-bd3c-7368d7c20372",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_updateRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._updateRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c008806e-3dae-4783-88c5-5108c410473c",
      "parentUUID": "3f7a4964-796c-49fc-949b-6b5497f0e3e4",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_updateUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._updateUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "af55b24f-0b28-4a2b-a729-614aabe5eab4",
      "parentUUID": "e0027bec-1f86-4e5a-b778-599fadef77be",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "addEnrollment Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.addEnrollment().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "21d74ef5-bcff-4ec0-97b8-066355ba0025",
      "parentUUID": "22d0f8fc-99fc-4896-95d9-15117854e377",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
      "fullTitle": "createUser Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.createUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "9b0cd785-4086-44e0-8471-507707ae5934",
      "parentUUID": "cd564caa-de06-4f4d-a345-925a55e76f54",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "deleteUser Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.deleteUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "46004f32-315f-4401-a645-01e1e64b87be",
      "parentUUID": "b44f757b-06f8-4809-bad4-5a91709f600c",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "doLogin Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject({ \"result\" : \"Reject\" }));\nmicrosoft_login.doLogin().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "115d1b30-517b-426a-a80c-b631e1a9cf59",
      "parentUUID": "ec7f4af6-7c21-4174-9b25-39b2ee2a2907",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "fullTitle": "getList Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "4acf7496-49a4-4f64-abe5-a01a4bdf3966",
      "parentUUID": "87ae3466-151b-4856-831e-b19f3b57e4b6",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "fullTitle": "getUser Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n  {\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "02556f8d-d023-4d71-bb9c-3b5e96aeb5c0",
      "parentUUID": "021dcfd3-efa1-4d09-a4f5-99e1e8770480",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "resetEnrollments Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.resetEnrollments().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "a3e78da8-834c-433e-b156-03a4b4aa5a05",
      "parentUUID": "dab3d1f9-ee78-4886-85c5-61147dc1fcb1",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addAgent Nel caso in cui un agente di api.ai non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode:400, msg:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(400);",
      "err": {},
      "isRoot": false,
      "uuid": "323df3b3-ed51-4e2a-9304-88849a3d0e5b",
      "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addAgent Nel caso in cui un agente di api.ai sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.addAgent(mock_agent).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "06edb568-7970-48b4-a45c-976077ef2d71",
      "parentUUID": "9594918e-0827-4c03-b74d-20002a26911a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getAgent Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "7f19c384-de7b-4c99-abbf-36b6c8e8234d",
      "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getAgent Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = agents.getAgent('mock_name');\nobservable.subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield(null, {Item: {mock_agent}});\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "a9f94659-f673-41e2-8a02-a82ddcf1ed14",
      "parentUUID": "3a926ecc-ddc9-4e67-aedb-76dda206b610",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getAgentList Nel caso in cui un blocco di agenti non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '2'});\ndynamo_client.scan.yield({statusCode:500, msg:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "4d1d717f-fcbe-478e-a381-5b53601ada0b",
      "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getAgentList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgentList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [mock_agent], LastEvaluatedKey: '1'});\ndynamo_client.scan.yield(null, {Items: [mock_agent]}); // Ultimo elemento da ottenere\nexpect(next.callCount).to.be.above(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e08ca80c-2ca7-47d1-b513-6971eabf39b7",
      "parentUUID": "96e4d162-f61e-4af5-8cd6-f83f663798d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeAgent Nel caso in cui un agente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, msg:\"error removing rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "d298e2be-44aa-4561-aca8-d83922a6ef69",
      "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "removeAgent Nel caso in cui un agente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.removeAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, msg:\"success\"});\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "92dabb8f-ebe5-4e8d-852c-a00784491d2e",
      "parentUUID": "ced7a107-e669-44c0-9209-fecc09ded95d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateAgent Nel caso in cui un agente non venga aggiornato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, msg:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nexpect(error.getCall(0).args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "ef631d93-7562-4059-94e4-4388897b154d",
      "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateAgent Nel caso in cui un agente sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.updateAgent('mock_name').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, mock_agent);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c7b7d4c3-fefb-47df-95ef-58007d409a92",
      "parentUUID": "e0d8e836-0862-4359-9b37-851ca825eb03",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
      "fullTitle": "query Nel caso in cui la richiesta HTTP vada a buon fine, la Promise restituita deve essere risolta con i dati relativi alla risposta dell'assistente virtuale",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "RequestPromise.returns(Promise.resolve(response));\nadapter.query(query).then(function(data)\n\t\t\t\t\t{\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(done);",
      "err": {},
      "isRoot": false,
      "uuid": "29b5ccf9-c97a-42bb-8779-81157c19139a",
      "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
      "skipped": false
    },
    {
      "title": "Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
      "fullTitle": "query Nel caso si verifichi un errore durante la richiesta HTTP, la Promise restituita deve essere respinta",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//sarebbero da aggiungere i singoli casi (status code, data.statusCode, ecc)\nRequestPromise.returns(Promise.resolve(error));\nadapter.query(query).then(done).catch(function(err){done();});",
      "err": {},
      "isRoot": false,
      "uuid": "3e358c25-16ae-48bd-a1a0-b66dc7bd35ee",
      "parentUUID": "802aa6cf-a946-4742-aa12-eb6b596c6a8c",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addConversation Nel caso in cui una conversazione non venga aggiunta a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({ statusCode : 400, message : \"Requested resource not found\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "5668bdfd-c977-4457-8117-551210a0aeac",
      "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
      "fullTitle": "addConversation Nel caso in cui una conversazione sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell' Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addConversation(mock_conv).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "7a38e270-a340-4edf-9fa6-9f62384fce9c",
      "parentUUID": "6559be4c-fb2f-467f-a445-405ec898518e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addMessage Nel caso in cui un messaggio non venga aggiunta alla conversazione a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield({ statusCode : 500, message : \"error adding message\" });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "368ca2cb-2c11-46ce-914b-22278d5221c2",
      "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "addMessage Nel caso in cui un messaggio venga aggiunto correttamente alla conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.addMessage({sender:'mock_sender',text: 'mock_text', timestamp: '2000-10-10'},2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.update.yield(null,{});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "bc373be5-705e-46cc-8c7a-b0409ac0dac0",
      "parentUUID": "fda16baa-e7db-45f3-b5d5-1e0b0e6e3cc6",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "getConversation Nel caso in cui una conversazione non venga restituita a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield({ statusCode  :500, message : \"error downloading conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "4f3caf75-bc54-4edc-9b6f-8ff2f19cd364",
      "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getConversation Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, mock_conv);\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.Item.session_id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "157cb40b-76b0-4ffa-914e-2a4561400385",
      "parentUUID": "d7852712-1502-476b-a089-e33ffd23803a",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getConversationList Nel caso in cui un blocco di conversazioni non venga restituito a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversationList().subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\ndynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2],LastEvaluatedKey:3});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\tcallNext = next.getCall(1);\nexpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "deaca613-014c-4192-b897-34fe8a71ecbe",
      "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getConversationList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte le conversazioni ottenute dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.getConversationList().subscribe(\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnext: next,\n  \t\t\t\t\t\terror: error,\n  \t\t\t\t\t\tcomplete: complete\n  \t\t\t\t\t});\n  dynamo_client.scan.yield(null, {Items:[mock_conv],LastEvaluatedKey:2});\n\t\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_conv2]});\n  expect(error.callCount).to.equal(0);\n  expect(next.callCount).to.equal(2);\n\t\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv.session_id);\n\t\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\t\texpect(callNext.args[0].session_id).to.equal(mock_conv2.session_id);\n  expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5b128857-9589-48f7-9090-1d3446fa8623",
      "parentUUID": "62d98a05-f03c-45e4-8e33-77916f9a4cdf",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "removeConversation Nel caso in cui una conversazione non venga eliminata a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing conversation\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "6edf9515-761a-4cbd-bfd6-48de37ad0e83",
      "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "removeConversation Nel caso in cui una conversazione sia eliminata correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "conv.removeConversation(2).subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "c352c821-931d-42fa-b5d3-2b541cf09beb",
      "parentUUID": "c55533c5-9c61-45c9-a569-b29fef9e08e4",
      "skipped": false
    },
    {
      "title": "La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
      "fullTitle": "webhook La risposta deve avere il campo name del context uguale a 'admin' nel caso in cui l'utente sia stato riconosciuto come possibile amministratore.",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "body.result.action = 'user.check';\nlet ev = {body: JSON.stringify(body)};\nusers_DAO.getUserList.returns(Rx.Observable.of({ name : \"Mauro Carlin\", username : \"mou\"}));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\n//expect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'admin');",
      "err": {},
      "isRoot": false,
      "uuid": "809d7d6d-f37c-4b0e-bae0-e2254b96a1ea",
      "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
      "skipped": false
    },
    {
      "title": "La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
      "fullTitle": "webhook La risposta deve avere il campo name del context uguale a 'welcome' nel caso in cui l'utente sia stato riconosciuto come ospite che ha avuto interazioni passate con il sistema.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "body.result.action = 'guest.check';\nlet ev = {body: JSON.stringify(body)};\nguests_DAO.getGuestList.returns(Rx.Observable.of([{ name : \"Mauro Carlin\", username : \"mou\", company : \"Google\"}]));\nservice.webhook(ev, context);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).not.to.be.null;\nexpect(JSON.parse(call.args[0].body).contextOut[0]).to.have.deep.property('name', 'welcome');",
      "err": {},
      "isRoot": false,
      "uuid": "5a70baa2-af0b-4740-809d-fcdac967b827",
      "parentUUID": "739deb20-8b18-4cdb-8a8d-9ddb1f047c3b",
      "skipped": false
    },
    {
      "title": "Deve sollevare un'eccezione se viene chiamato.",
      "fullTitle": "next Deve sollevare un'eccezione se viene chiamato.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(obs.next.bind(obs)).to.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "cc60460d-6efe-4cc6-a304-41eab39865e1",
      "parentUUID": "b312ec6d-2e5f-4bd2-a195-33ee58376e0b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addGuest Nel caso in cui un ospite non venga aggiunto a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addGuest().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "753dbb52-26d3-4f90-b1f6-70561c4a8a3b",
      "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "addGuest Nel caso in cui un ospite sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addGuest('mauro','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8c5fba9d-c2c2-463b-92dc-3ec00fcbb05a",
      "parentUUID": "0278ab44-e86f-4644-8549-af97c2e6a21e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "getGuest Nel caso in cui un ospite non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n          {\n            next: next,\n            error: error,\n            complete: complete\n          });\n          dynamo_client.get.yield({ statusCode : 500, message : \"error getting data\" });\n          expect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b262d94a-d279-4046-9e36-43a0a6ecb5a8",
      "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getGuest Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuest('Mauro', 'Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.get.yield(null, { Item:{name : \"Mauro\", company : \"Zero12\" }});\nexpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal( \"Mauro\");\n\t\t\t\t\texpect(callNext.args[0].company).to.equal(\"Zero12\");\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "60c965d0-1766-48ef-bb55-6f004ab99351",
      "parentUUID": "c1c6188c-beb0-4712-a42f-e5a6e951d9d0",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "getGuestList Nel caso in cui un blocco di ospiti non venga restituito a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{ name : \"Piero\", company : \"Google\" }], LastEvaluatedKey: 'Luca'});\ndynamo_client.scan.yield({ statusCode : 500 });\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8776d3d8-1043-42f1-8b31-5b814cd33129",
      "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "fullTitle": "getGuestList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'Observer iscritto, fino ad inviare tutte gli ospiti ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.getGuestList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name : \"Mauro\", company : \"Zero12\" }], LastEvaluatedKey: 'Piero'});\ndynamo_client.scan.yield(null, {Items: [{name : \"Piero\", company : \"Google\" }]});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('Mauro');\nexpect(callNext.args[0].company).to.equal('Zero12');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('Piero');\nexpect(callNext.args[0].company).to.equal('Google');\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "1fef49e6-822a-42d7-b42b-8826debe5cf0",
      "parentUUID": "0eccf4f9-5b92-4dec-acfb-11ea3cbfef31",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "removeGuest Nel caso in cui un ospite non venga eliminato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.removeGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield({ statusCode : 500, message : \"error removing guest\" });\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8d25fdf0-1be4-4750-ac84-15b3e8ba4888",
      "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "removeGuest Nel caso in cui un ospite sia eliminato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.removeGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.delete.yield(null, { statusCode : 200, message : \"success\" });\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e86c864f-323d-451d-9ad0-047bd5ce7dda",
      "parentUUID": "9f7bec2a-b42d-425b-bb2f-a1fb2021a9fc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "updateGuest Nel caso in cui un ospite non venga aggiornato a causa di un errore del DB, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.updateGuest('mou').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating guest\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "3371d654-5c3b-42d2-a4ab-537d8da7f4c3",
      "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "updateGuest Nel caso in cui un ospite sia aggiornato correttamente, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.updateGuest('mou','Zero12').subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6670ef9b-b7da-4ea5-bd1c-3ef6f8f68588",
      "parentUUID": "075a1914-526b-4c1e-b946-ac9bc2bfbcb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "fullTitle": "addConversation Nel caso in cui si provi ad aggiungere l'id di una conversazione già presente, l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield({ statusCode: 500 }, null);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);",
      "err": {},
      "isRoot": false,
      "uuid": "544e1ed9-7c43-41ee-963c-c821171d7fc7",
      "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "fullTitle": "addConversation Nel caso in cui venga aggiunto correttamente l'id di una conversazione, l'Observable restituito deve chiamare il metodo complete dell'Observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "guests.addConversation('Mauro', 'Zero12', 2).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.update.yield(null, { Attributes: {conversations: [1,2] }});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "580adbdf-8ace-47a3-ab2d-40cff2ba6a99",
      "parentUUID": "aaa121bd-0faf-4ccd-857d-acabe82fb00d",
      "skipped": false
    },
    {
      "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "fullTitle": "addMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.addMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "67b8b705-9b39-436d-876d-fc1258636321",
      "parentUUID": "9620d65a-bd4b-4e12-ba9f-cf08728b82cf",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
      "fullTitle": "getMember Nel caso in cui il metodo ottenga il membro dell'azienda allora l'Observable invia tale Member all'Observer iscritto tramite il metodo next e lo notifica richiamando una sola volta il metodo complete.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Docs: https://api.slack.com/methods/users.info\nlet res =\n{\n\t'ok': true,\n\t'user':\n\t{\n\t\t'id': 'U023BECGF',\n\t\t'name': 'bobby',\n\t\t'deleted': false,\n\t\t'color': '9f69e7',\n\t\t'profile':\n\t\t{\n\t\t\t'avatar_hash': 'ge3b51ca72de',\n\t\t\t'current_status': ':mountain_railway: riding a train',\n\t\t\t'first_name': 'Bobby',\n\t\t\t'last_name': 'Tables',\n\t\t\t'real_name': 'Bobby Tables',\n\t\t\t'email': 'bobby@slack.com',\n\t\t\t'skype': 'my-skype-name',\n\t\t\t'phone': '+1 (123) 456 7890'\n\t\t},\n\t\t'is_admin': true,\n\t\t'is_owner': true,\n\t\t'updated': 1490054400,\n\t\t'has_2fa': true\n\t}\n};\nweb_client.users.info.yield(null, res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].id).to.equal(res.user.id);\nexpect(callNext.args[0].name).to.equal(res.user.name);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "375c8d11-bc06-4ac8-8244-21c9fbfc83c3",
      "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
      "skipped": false
    },
    {
      "title": "Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "fullTitle": "getMember Se si verifica un errore nell'ottenere il membro dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.info.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "1fad7301-530a-4f1b-aee9-2f7a7858bd77",
      "parentUUID": "13b7d5d4-e1cc-4c51-8bc1-c7c42a6cf4ef",
      "skipped": false
    },
    {
      "title": "L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
      "fullTitle": "getMemberList L'Observable deve notificare l'Observer con il metodo complete solo dopo aver inviato tutti i Member tramite il metodo next.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nlet res =\n{\n\t\"ok\": true,\n\t\"members\":\n\t[\n\t\t{\n\t\t\t\"id\": \"U023BECGF\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"mauro\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Mauro Bocciofilo\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\"\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"U023BECLL\",\n\t\t\t\"team_id\": \"T021F9ZE2\",\n\t\t\t\"name\": \"bobby\",\n\t\t\t\"deleted\": false,\n\t\t\t\"status\": null,\n\t\t\t\"color\": \"9f69e7\",\n\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\"tz\": \"America\\/Los_Angeles\",\n\t\t\t\"tz_label\": \"Pacific Daylight Time\",\n\t\t\t\"tz_offset\": -25200,\n\t\t\t\"profile\":\n\t\t\t{\n\t\t\t\t\"avatar_hash\": \"ge3b51ca72de\",\n\t\t\t\t\"current_status\": \":mountain_railway: riding a train\",\n\t\t\t\t\"first_name\": \"Bobby\",\n\t\t\t\t\"last_name\": \"Tables\",\n\t\t\t\t\"real_name\": \"Bobby Tables\",\n\t\t\t\t\"email\": \"bobby@slack.com\",\n\t\t\t\t\"skype\": \"my-skype-name\",\n\t\t\t\t\"phone\": \"+1 (123) 456 7890\",\n\t\t\t},\n\t\t\t\"is_admin\": true,\n\t\t\t\"is_owner\": true,\n\t\t\t\"updated\": 1490054400,\n\t\t\t\"has_2fa\": false\n\t\t}\n\t]\n}\nweb_client.users.list.yield(null,res);\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(1);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].members[0].id).to.equal(res.members[0].id);\nexpect(callNext.args[0].members[0].name).to.equal(res.members[0].name);\nexpect(callNext.args[0].members[1].id).to.equal(res.members[1].id);\nexpect(callNext.args[0].members[1].name).to.equal(res.members[1].name);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "6a4197ec-c29f-4653-982b-2731b5650a78",
      "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
      "skipped": false
    },
    {
      "title": "Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "fullTitle": "getMemberList Se si verifica un errore nell'ottenere la lista dei membri dell'azienda, l'Observable deve notificare l'Observer iscritto richiamando il metodo error.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.getMemberList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\n//Esempio di errore (https://api.slack.com/methods/users.info/test)\nlet res =\n{\n\t'ok': false,\n\t'error': 'not_authed'\n}\nweb_client.users.list.yield(res);\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].ok).to.equal(false);\nexpect(callError.args[0].error).to.equal('not_authed');\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "f535844e-2430-47fc-b33d-d47b15b1b096",
      "parentUUID": "632e1d25-798f-496d-904a-16c4abd01939",
      "skipped": false
    },
    {
      "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "fullTitle": "removeMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.removeMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b3e3371d-9288-4bdd-8dd7-4592988c5cbb",
      "parentUUID": "262f348a-b96e-47bf-b040-a54baf6a0849",
      "skipped": false
    },
    {
      "title": "Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "fullTitle": "updateMember Anche se viene passato un Member corretto, l'ErrorObservable ritornato deve notificare l'Observer richiamando il suo metodo error.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "members.updateMember('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nexpect(error.callCount).to.equal(1);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "63451431-bb02-4a30-8895-0fd1a19a8473",
      "parentUUID": "172fd663-3c3c-4e85-9e46-26a3184907bc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui canali a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: ''};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields('errore');\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 500);\n  done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "193b13c0-c7fb-4e69-889f-940987b019db",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sugli utenti a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields(null, groups);\n          client.users.list.yields('errore');\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
      "err": {},
      "isRoot": false,
      "uuid": "2156a6ac-1c2b-4366-ba8e-418bcff81951",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getChannelList Nel caso in cui si verifichi un errore nella richiesta delle informazioni sui gruppi a Slack, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: ''};\n          service.getChannelList(ev, context);\n          client.groups.list.yields('errore');\n          client.users.list.yields(null, users);\n          client.channels.list.yields(null, channels);\n          context.succeed = function(args)\n          {\n            expect(args).to.have.property('statusCode', 500);\n            done();\n          }",
      "err": {},
      "isRoot": false,
      "uuid": "d8c15434-9efe-4724-a587-716172c2bfa7",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
      "fullTitle": "getChannelList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista dei canali Slack (utenti, canali pubblici e gruppi privati) in formato JSON.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: '', queryStringParameters: null};\nservice.getChannelList(ev, context);\nclient.groups.list.yields(null, groups);\nclient.users.list.yields(null, users);\nclient.channels.list.yields(null, channels);\ncontext.succeed = function(args)\n{\n  expect(args).to.have.property('statusCode', 200);\n  done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "7342ee25-ef4a-44f6-9843-7b66f537919d",
      "parentUUID": "ac9f4af7-b27b-46c8-aa1e-9ebe154b8f57",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "sendMsg Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield('errore');\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "ae0ceb3d-f4da-4b11-ba0d-aa27a37595c1",
      "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "sendMsg Nel caso in cui non si verifichi alcun errore, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: JSON.stringify(request_event)};\nservice.sendMsg(ev, context);\nclient.chat.postMessage.yield(null, responseSendMsg);\nexpect(context.succeed.callCount).to.equal(1);\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "766cab3f-44ee-47b9-a7ec-306059516b65",
      "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "fullTitle": "sendMsg Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = {body: JSON.stringify(bad_request)};\nservice.sendMsg(ev, context);\n\nexpect(context.succeed.callCount).to.equal(1);\t\nlet call = context.succeed.getCall(0);\nexpect(call.args[0]).to.have.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "cdcf8f35-5178-4b82-9894-0b963eca8740",
      "parentUUID": "b82d5dc7-3536-4ab6-9f33-73fdef730387",
      "skipped": false
    },
    {
      "title": "Deve chiamare complete_cb",
      "fullTitle": "complete Deve chiamare complete_cb",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount, \"il callback di complete non è stato chiamato esattamente una volta.\").to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "164b4e50-d696-451e-860c-72375fd7a329",
      "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
      "skipped": false
    },
    {
      "title": "Non deve chiamare complete_cb se l'observer è in pausa",
      "fullTitle": "complete Non deve chiamare complete_cb se l'observer è in pausa",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onComplete(success);\nobs.pause();\nobs.complete();\nexpect(success.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b4de0c6d-5cf4-4313-993b-3189d5ec1724",
      "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
      "skipped": false
    },
    {
      "title": "Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "fullTitle": "complete Deve chiamare complete_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onComplete(success);\nobs.complete();\n        expect(success.callCount).to.equal(1);\nobs.pause();\n        obs.complete();\n        expect(success.callCount).to.equal(1);\nobs.resume();\n        expect(success.callCount).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "f48a24c6-305f-45a2-a75f-1bbd55fc4a41",
      "parentUUID": "71a63949-b02a-45da-9d82-bb3cdae43e28",
      "skipped": false
    },
    {
      "title": "Deve chiamare error_cb",
      "fullTitle": "error Deve chiamare error_cb",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        let call = success.getCall(0);\n\n        expect(success.callCount).to.equal(1);\n        expect(call.args[0]).to.equal(err);",
      "err": {},
      "isRoot": false,
      "uuid": "da3569fc-a24e-441b-a2f4-8829e6eec349",
      "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
      "skipped": false
    },
    {
      "title": "Non deve chiamare error_cb se l'observer è in pausa",
      "fullTitle": "error Non deve chiamare error_cb se l'observer è in pausa",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onError(success);\nobs.pause();\nobs.error('errore');\n        expect(success.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "65e1072f-f459-42dc-8f7c-9db51ff6fc20",
      "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
      "skipped": false
    },
    {
      "title": "Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "fullTitle": "error Deve chiamare error_cb dopo che l'observer è stato ripreso se, mentre era in pausa, il metodo è stato chiamato.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let err = new Error('Errore');\nobs.onError(success);\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.pause();\nobs.error(err);\n        expect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(2);\n        let call = success.getCall(1);\n        expect(call.args[0]).to.equal(err);",
      "err": {},
      "isRoot": false,
      "uuid": "13860a7e-713e-449d-94c9-71a7e65b7b4f",
      "parentUUID": "204d1bdd-22c0-4850-94ab-0c82770bd4b4",
      "skipped": false
    },
    {
      "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
      "fullTitle": "next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, se l'observer non è in pausa.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nlet call = success.getCall(0);\nexpect(call.args[0]).to.equal('data');",
      "err": {},
      "isRoot": false,
      "uuid": "8cb58066-4208-4eac-90c2-ee97394123bb",
      "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
      "skipped": false
    },
    {
      "title": "Non deve chiamare next_cb se l'observer è in pausa",
      "fullTitle": "next Non deve chiamare next_cb se l'observer è in pausa",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onNext(success);\nobs.pause();\nobs.next('Function called');\nexpect(success.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "3a79d872-a40c-4c3c-8e5b-dc6efc2b3252",
      "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
      "skipped": false
    },
    {
      "title": "Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
      "fullTitle": "next Deve chiamare next_cb, inoltrandogli il parametro ricevuto, dopo che l'observer ha ripreso.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "obs.onNext(success);\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.pause();\nobs.next('data');\nexpect(success.callCount).to.equal(1);\nobs.resume();\nexpect(success.callCount).to.equal(1);\nobs.next('other data');\nexpect(success.callCount).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "bf55b7ae-26fa-4b00-9585-a3fdf3edbb10",
      "parentUUID": "ba3d019e-1ebb-4126-b37b-87886bf6b99f",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addRule Nel caso in cui una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.addRule(mock_rule).subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\nexpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "934e4d87-01be-444f-acf3-15460f34536a",
      "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addRule Nel caso in cui una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.addRule(mock_rule).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "503cfc1b-beba-4010-8279-0dcd837d9f20",
      "parentUUID": "bf1363d3-41b8-4990-a222-6f3a85fdfef2",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getRule Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.getRule(1).subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n        expect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "21dc619c-91e6-40c6-ad11-1442868ac06e",
      "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getRule Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = rules.getRule(1);\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_rule);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.Item.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "345df0f6-fa34-4840-94b1-b70d9eb5d099",
      "parentUUID": "05b253d1-4b06-475d-8369-e3533b9fcadc",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getRuleList Nel caso in cui un blocco di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2],LastEvaluatedKey:3});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "d4a87f6a-2a70-4e9c-8324-3218f7b80b41",
      "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getRuleList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.getRuleList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule],LastEvaluatedKey:2});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_rule2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule.id);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].id).to.equal(mock_rule2.id);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "03a52eed-d228-4ce0-ba73-bf66dd2c67eb",
      "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getRuleList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//da definire",
      "err": {},
      "isRoot": false,
      "uuid": "85e87854-923e-4963-bc32-c5b333ff66bb",
      "parentUUID": "796a2f4e-c5ba-4b56-8e5f-ad0836ca3af1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeRule Nel caso in cui una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "bced9eb7-0935-4d60-9908-f9ccfb02dead",
      "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "removeRule Nel caso in cui una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.removeRule(1).subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "e3e011d3-501d-46f6-9b90-1cdb72936702",
      "parentUUID": "a02b0b04-9bbe-4cd2-bf7b-17ecc041275e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateRule Nel caso in cui una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "5c7da28f-01a5-43d5-b23d-da7e128d55a8",
      "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateRule Nel caso in cui una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rules.updateRule(1).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "447686e3-caa4-44c9-ad92-ec66ddf71e3d",
      "parentUUID": "3430135a-ac18-4acd-88fb-01bd4659c0b5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "fullTitle": "addRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: \"\"};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "1674d18a-5a83-4caf-8846-12583e8cd6c0",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "addRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "de153504-a563-4490-a27b-661ae53e130a",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "addRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.empty());\nlet ev = {body: JSON.stringify(rule)};\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "6b942434-fc86-4f3c-9e37-9538706a122d",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "fullTitle": "addRule Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.addRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { body: JSON.stringify(rule) };\nrules.addRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
      "err": {},
      "isRoot": false,
      "uuid": "24d0af1b-2539-48ca-8e56-1ac8af8f5f8c",
      "parentUUID": "d83d8458-d69e-4524-8e3e-2c0c94bec188",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "deleteRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.removeRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "361ad7bf-ee31-49ea-bf21-9bc46909f363",
      "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "deleteRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.removeRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }};\nrules.deleteRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "70f32ba1-df22-443b-9957-30963e0ca8b2",
      "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "fullTitle": "deleteRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "{\n  rulesDAO.removeRule.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\n  let ev = {pathParameters: { id: 1 }};\n  rules.deleteRule(ev, context);\n  let call = context.succeed.getCall(0);\n  expect(context.succeed.calledOnce).to.be.true;\n  expect(call.args[0]).not.to.be.null;\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\n  \t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 404);\n};",
      "err": {},
      "isRoot": false,
      "uuid": "80eed219-b4c0-4c48-9cab-b2d5962fcae1",
      "parentUUID": "78918e59-adcc-4e96-93fd-f9fa31c3ead3",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
      "fullTitle": "getRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la Rule cercata.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRule.returns(Rx.Observable.of(rule));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify(rule));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "dd96d9e9-73ad-4b34-8c50-913c43728867",
      "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRule.returns(Rx.Observable.throw(new Error()));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "8c54c567-b5e3-4e35-b84c-e47a0f9f381b",
      "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "fullTitle": "getRule Nel caso in cui la Rule richiesta non sia disponibile, il campo statusCode della risposta deve essere impostato a 404.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRule.returns(Rx.Observable.throw({ code: 'Not found' }));\nlet ev = {pathParameters: { id: 1 }};\nrules.getRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
      "err": {},
      "isRoot": false,
      "uuid": "749eb433-b190-4ec6-9811-771631eb928d",
      "parentUUID": "87f5b940-cacc-47f6-a220-04c266d28f86",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
      "fullTitle": "getRuleList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista delle Rule.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRuleList.returns(Rx.Observable.of(rule_1, rule_2));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ rules: [rule_1, rule_2] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "24a91b29-1fb3-456d-89a1-b84f022bbe85",
      "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getRuleList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.getRuleList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getRuleList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "02c0b11a-ac3d-4d15-9285-a93c10989d27",
      "parentUUID": "6c012c69-dca6-4f4e-a7bf-3bb04e611dbb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
      "fullTitle": "getTaskList Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200 e il campo body deve contenere la lista dei Task.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "taskDAO.getTaskList.returns(Rx.Observable.of(task_1));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ tasks: [task_1] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "de0c99e0-dc0b-4bb3-b240-aa39ffb3253f",
      "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "getTaskList Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "taskDAO.getTaskList.returns(Rx.Observable.throw(new Error()));\nlet ev = {};\nrules.getTaskList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "a341108f-a681-4925-be66-f3b2e866edd0",
      "parentUUID": "35f3fa36-00bf-4d8b-bd5f-d1a6a924ef8d",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "fullTitle": "updateRule Nel caso in cui la chiamata al metodo vada a buon fine, il campo statusCode della risposta deve essere impostato a 200.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.updateRule.returns(Rx.Observable.empty());\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "707839fe-6576-4a1f-bb39-718966de647a",
      "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "fullTitle": "updateRule Nel caso in cui la chiamata al metodo venga fatta con un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: \"\" , body: \"\"};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "61296071-82c7-481b-bb79-aa83e584e793",
      "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "fullTitle": "updateRule Nel caso in cui la chiamata al metodo generi un errore del microservizio, il campo statusCode della risposta deve essere impostato a 500.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "rulesDAO.updateRule.returns(Rx.Observable.throw(new Error));\nlet ev = {pathParameters: { id: 1 }, body: JSON.stringify(rule)};\nrules.updateRule(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "5b610349-3571-45f4-8a04-a13584e3c7b9",
      "parentUUID": "f359a61f-53e0-4849-9350-f676a79cdc49",
      "skipped": false
    },
    {
      "title": "Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
      "fullTitle": "speechToText Se la chiamata al metodo stt.recognize fallisce allora il metodo deve chiamare il metodo rejected della Promise con un parametro onRejected avente campo code 500.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let reject = sinon.stub();\nlet promise = watson.speechToText();\npromise.catch(reject);\ndone();\nexpect(reject.callCount).to.equal(1);\nlet call = reject.getCall(0);\nexpect(call.args[0]).to.deep.equal({code: 500});",
      "err": {},
      "isRoot": false,
      "uuid": "3c0189b2-57ed-4624-b102-f0f3368eca31",
      "parentUUID": "c2a6a27f-970f-4b54-aac1-55dab2da64e9",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addTask Nel caso in cui la funzione di una direttiva non venga aggiunta a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.addTask(mock_task).subscribe(\n\t\t\t\t\t{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t\tdynamo_client.put.yield({statusCode:400, message:\"Requested resource not found\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "5bac7e4d-6ace-419b-b143-e9926c97fd91",
      "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addTask Nel caso in cui la funzione di una direttiva sia aggiunta correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.addTask(mock_task).subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "42f93b22-bdc4-4875-b595-5023c1452e15",
      "parentUUID": "91b18b66-4766-489b-8b7f-13f9944c23f4",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getTask Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.getTask('mock_type').subscribe(\n        {\n          next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n        });\n        dynamo_client.get.yield({statusCode:500, message:\"error getting data\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "3cfd4d56-7c37-4a09-aad0-501abbaa9130",
      "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getTask Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = tasks.getTask('mock_type');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.get.yield(null, mock_task);\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.Item.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "cec36c77-a3a1-478d-8ef1-e9188d14c3cf",
      "parentUUID": "099c502d-b5e9-45d7-8547-25e35212d3d8",
      "skipped": false
    },
    {
      "title": "Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getTaskList Nel caso in cui un blocco di funzioni di direttive non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{mock_task}], LastEvaluatedKey: \"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items: [{mock_task2}], LastEvaluatedKey: \"mock_type3\"});\n\t\t\t\t\tdynamo_client.scan.yield({statusCode: 500});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "b7ea70d0-04f4-4cf0-928b-61b8ce7b6a55",
      "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getTaskList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.getTaskList().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task],LastEvaluatedKey:\"mock_type2\"});\n\t\t\t\t\tdynamo_client.scan.yield(null, {Items:[mock_task2]});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(next.callCount).to.equal(2);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task.type);\n\t\t\t\t\tcallNext = next.getCall(1);\n\t\t\t\t\texpect(callNext.args[0].type).to.equal(mock_task2.type);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "8f938647-2fef-4dbb-a072-6318ef9cad47",
      "parentUUID": "1b6a918c-e231-43ba-8b1e-c2745b127421",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeTask Nel caso in cui la funzione di una direttiva non venga rimossa a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield({statusCode: 500, message:\"error removing rule\"});\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "1243fdb4-4787-4a29-b7ad-282b21e87191",
      "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "removeTask Nel caso in cui la funzione di una direttiva sia rimossa correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.removeTask('mock_type').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {statusCode: 200, message:\"success\"});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "659e1a19-d564-46bf-b881-4dc2187ad8fc",
      "parentUUID": "ddd2deae-dc67-4fa1-acbb-783f728a0c68",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateTask Nel caso in cui la funzione di una direttiva non venga aggiornata a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n  \t\t\t\t\terror: error,\n  \t\t\t\t\tcomplete: complete\n  \t\t\t\t});\n  \t\t\t\t\tdynamo_client.put.yield({statusCode: 500, message:\"error updating rule\"});\n\texpect(error.callCount).to.equal(1);\n\tlet callError = error.getCall(0);\n\texpect(callError.args[0].statusCode).to.equal(500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8504f966-68d3-4836-81ad-ad5cada735c1",
      "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateTask Nel caso in cui la funzione di una direttiva sia aggiornata correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "tasks.updateTask('mock_type').subscribe(\n{\n            next: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\n          expect(error.callCount).to.equal(0);\n          expect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "28aa9f5a-915d-4b3a-acaa-dfaec7c73215",
      "parentUUID": "5fa06823-14a6-401d-b42f-033e00297dcb",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "addUser Nel caso in cui l'utente non venga aggiunto a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.addUser('mou').subscribe(\n\t\t\t\t\t{\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\n\t\t\t\t\t//TableName: [nome tabella che non esiste]\n\t\t\t\t\tdynamo_client.put.yield({statusCode: 400, message:\"Requested resource not found\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(400);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "2433a75a-55dc-4c45-8002-333e240b3fed",
      "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "addUser Nel caso in cui l'utente sia aggiunto correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.addUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "71d8a601-23b5-4b1c-aab0-15532fba3a8c",
      "parentUUID": "6fac0e24-fc7b-4864-a248-232b6ca6035b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getUser Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.get.yield({statusCode: 500, message:\"error getting data\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "8e647fbb-14a2-4528-a7ea-0cce4231b29a",
      "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUser Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let observable = users.getUser('mou');\nobservable.subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.get.yield(null, {Item: {name: \"mauro\", username: \"mou\"}});\n\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\n\t\t\t\t\texpect(next.callCount).to.equal(1);\n\t\t\t\t\tlet callNext = next.getCall(0);\n\t\t\t\t\texpect(callNext.args[0].name).to.equal('mauro');\n\t\t\t\t\texpect(callNext.args[0].username).to.equal('mou');\n\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "71b1ff63-6baf-48f8-a201-3fd68b3fcb3a",
      "parentUUID": "bcf95ab7-ada2-4f61-ab33-f4b854eb1061",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "getUserList Nel caso in cui si verifichi un errore nell'interrogazione del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}], LastEvaluatedKey: 'marco'});\ndynamo_client.scan.yield({statusCode: 500});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\n\n          expect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "a3e8042e-1b92-41b5-97a5-34db559918b1",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUserList Nel caso in cui l'interrogazione del DB vada a buon fine, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'piero'});\ndynamo_client.scan.yield(null, {Items: [{name: \"piero\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('piero');\nexpect(callNext.args[0].username).to.equal('sun');\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "5a305065-883c-4efc-957a-001b810df4a2",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con un solo attributo, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let query =\n{\n\tname: 'mauro'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
      "err": {},
      "isRoot": false,
      "uuid": "a249c586-c79d-4f2b-abf2-acd05ccd7b26",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "fullTitle": "getUserList Nel caso in cui il metodo venga chiamato con queryStringParameters con due attributi, l'Observable restituito deve chiamare il metodo next dell'observer iscritto con i dati filtrati ottenuti dall'interrogazione, ed in seguito il metodo complete un'unica volta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let query =\n{\n\tname: 'mauro',\n\tslack_channel: 'channel'\n};\nusers.getUserList(query).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"mou\"}], LastEvaluatedKey: 'sun'});\ndynamo_client.scan.yield(null, {Items: [{name: \"mauro\", username: \"sun\"}]}); // Ultimo elemento da ottenere\nlet callScan = dynamo_client.scan.getCall(0);\n          expect(callScan.args[0]).to.have.deep.property('FilterExpression', 'full_name = :full_name and slack_channel = :slack_channel');\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:full_name', 'mauro' );\nexpect(callScan.args[0]).to.have.deep.property('ExpressionAttributeValues.:slack_channel', 'channel' );\nexpect(error.callCount).to.equal(0);\nexpect(next.callCount).to.equal(2);\nlet callNext = next.getCall(0);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('mou');\ncallNext = next.getCall(1);\nexpect(callNext.args[0].name).to.equal('mauro');\nexpect(callNext.args[0].username).to.equal('sun');",
      "err": {},
      "isRoot": false,
      "uuid": "f776324b-dd8c-4398-b072-c422452452ba",
      "parentUUID": "acd9a49c-170b-486f-97f4-460d8dfc1fb1",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "removeUser Nel caso in cui l'utente non venga rimosso a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\n\n\t\t\t\t\tdynamo_client.delete.yield({statusCode: 500, message: \"error removing user\"});\n\n\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\tlet callError = error.getCall(0);\n\t\t\t\t\texpect(callError.args[0].statusCode).to.equal(500);\n\n\t\t\t\t\texpect(next.callCount).to.equal(0);\n\n\t\t\t\t\texpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "70ecaf17-d8cc-4dcc-8e66-fbc752b593e0",
      "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
      "fullTitle": "removeUser Nel caso in cui l'utente sia rimosso correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.removeUser('mou').subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\ndynamo_client.delete.yield(null, {});\n\t\t\t\t\texpect(error.callCount).to.equal(0);\n\t\t\t\t\texpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "24cd4871-5284-4146-9984-f989a46d6967",
      "parentUUID": "ea0ad7ca-3878-41be-88fc-70e538015e5b",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "fullTitle": "updateUser Nel caso in cui l'utente non venga modificato a causa di un'errore del DB, l'Observable ritornato deve chiamare il metodo error dell'observer iscritto.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield({statusCode: 500, message: \"error updating user\"});\nexpect(error.callCount).to.equal(1);\nlet callError = error.getCall(0);\nexpect(callError.args[0].statusCode).to.equal(500);\nexpect(next.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "12dec5a4-3114-4254-8c1b-4de61a05c51c",
      "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
      "skipped": false
    },
    {
      "title": "Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "fullTitle": "updateUser Nel caso in cui l'utente sia modificato correttamente, l'Observable restituito deve chiamare il metodo complete dell'observer iscritto un'unica volta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users.updateUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\ndynamo_client.put.yield(null, {});\nexpect(error.callCount).to.equal(0);\nexpect(complete.callCount).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "cf1757ff-525d-4351-9cc1-af9d61d15f5d",
      "parentUUID": "516606e8-a45a-4765-a379-77ad44f54277",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "addUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "584e0bde-9cbe-474b-9b6f-f910cb839772",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "fullTitle": "addUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.empty());\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "4c7de136-9b70-4865-a84b-e86ac58eb34c",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "fullTitle": "addUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.throw(new Error()));\n          let ev = { body: \"\" };\n          service.addUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "dcf6e942-f678-4f00-8a8e-8bf44321913c",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "fullTitle": "addUser Nel caso in cui sia passato un oggetto la cui chiave primaria è uguale a quella di un oggetto già esistente, il campo statusCode della risposta deve essere impostato a 409",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.addUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet user=\n{\n  name: \"Mauro\",\n  username: \"mou\"\n};\nlet ev = { body: JSON.stringify(user) };\nservice.addUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Conflict' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 409);",
      "err": {},
      "isRoot": false,
      "uuid": "ffc49c2b-e8f8-4489-86d6-d22d9e60a775",
      "parentUUID": "e6c637c9-577c-45f7-af5a-20ae75bfc050",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "deleteUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.removeUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "527798db-4117-4d43-9e24-bb78024275f7",
      "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "fullTitle": "deleteUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.removeUser.returns(Rx.Observable.empty());\nlet ev = { pathParameters: { username: 'mou' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "2af69d0c-4bea-4975-87ce-4e145481423d",
      "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "fullTitle": "deleteUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.removeUser.returns(Rx.Observable.throw({ code: 'ConditionalCheckFailedException' }));\nlet ev = { pathParameters: { username: 'pippo' }};\nservice.deleteUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
      "err": {},
      "isRoot": false,
      "uuid": "9e0ac3ba-43b5-48b4-a156-aacacd78c0a9",
      "parentUUID": "542ca549-4e45-4cb6-852b-c7889f87c2af",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "getUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUser.returns(Rx.Observable.throw(new Error()));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "9ba417d8-2bba-4ca1-a11c-f523c4794c8d",
      "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
      "fullTitle": "getUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere l'utente richiesto",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUser.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }));\nlet ev = { pathParameters: { username: 'mou'} };\nservice.getUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ name : 'Mauro', username : 'mou' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "c4fa0022-1aba-435b-bbe9-92af173cecf2",
      "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "fullTitle": "getUser Nel caso in cui sia passato uno username non esistente, il campo statusCode della risposta deve essere impostato a 404",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUser.returns(Rx.Observable.throw({ code: 'Not found' }));\n          let ev = { pathParameters: { username: 'pippo'} };\n          service.getUser(ev, context);\n          let call = context.succeed.getCall(0);\n          expect(context.succeed.calledOnce).to.be.true;\n          expect(call.args[0]).not.to.be.null;\n          expect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Not found' }));\nexpect(call.args[0]).to.have.deep.property('statusCode', 404);",
      "err": {},
      "isRoot": false,
      "uuid": "13fb6b81-085c-4919-a6aa-c34c43a07112",
      "parentUUID": "a4782cf0-880d-486a-91e3-c1251b9691d5",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "getUserList Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUserList.returns(Rx.Observable.throw(new Error()));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "70819cd4-26ac-494c-9a6a-364c9f708a56",
      "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
      "fullTitle": "getUserList Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200 ed il corpo della risposta deve contenere la lista degli utenti",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.getUserList.returns(Rx.Observable.of({ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }));\nlet ev = { queryStringParameters: {} };\nservice.getUserList(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ users: [{ name : 'Mauro', username : 'mou' }, { name : 'Nicola', username : 'tinto' }] }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "427574cc-a0b2-4674-85ed-98eb964196f4",
      "parentUUID": "d98c2df1-5efa-4cf8-8328-5fafa3b8e9fe",
      "skipped": false
    },
    {
      "title": "Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "fullTitle": "updateUser Nel caso in cui si verifichi un errore, il campo statusCode della risposta deve essere impostato a 500",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.updateUser.returns(Rx.Observable.throw(new Error()));\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Internal server error' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 500);",
      "err": {},
      "isRoot": false,
      "uuid": "332976fa-5130-40b7-8f05-0453f492dafe",
      "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "fullTitle": "updateUser Nel caso in cui non si verifichino errori, il campo statusCode della risposta deve essere impostato a 200",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "users_DAO.updateUser.returns(Rx.Observable.empty());\nlet user =\n{\n  name: \"gianluca\"\n};\nlet ev = { pathParameters: \"mou\", body: JSON.stringify(user) };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).not.to.be.null;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'success' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 200);",
      "err": {},
      "isRoot": false,
      "uuid": "61c99b34-10db-4968-8d2e-7717a326d5e6",
      "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "fullTitle": "updateUser Nel caso in cui sia passato un parametro non atteso, il campo statusCode della risposta deve essere impostato a 400",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let ev = { pathParameters: \"\", body: \"\" };\nservice.updateUser(ev, context);\nlet call = context.succeed.getCall(0);\nexpect(context.succeed.calledOnce).to.be.true;\nexpect(call.args[0]).to.have.deep.property('body', JSON.stringify({ message: 'Bad Request' }));\n\t\t\t\t\texpect(call.args[0]).to.have.deep.property('statusCode', 400);",
      "err": {},
      "isRoot": false,
      "uuid": "4f17a565-39dc-45d1-9026-de65d6850c53",
      "parentUUID": "52ba070d-3a13-444f-985d-5b832579633e",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata al microservizio Notification non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.reject(JSON.stringify(notifications_error)));\nconversations.addMessage.returns(Rx.Observable.throw(new Error()));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "445aa1eb-908a-4bc9-a1e1-fa54c2a5caa9",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata al microservizio Rules non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.reject(JSON.stringify(rules_error)));\nlistener.onMessage(event, context, callback);\nexpect(callback.callCount).to.above(1); // le chiamate a questo microservizio sono almeno una!\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "fdde9ab2-e797-4b53-8eb3-532a66ae2a8b",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata ai metodi di GuestsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'msg': 'error getting guest' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "5adb5032-e2b4-48f4-9355-909020f3b1da",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "fullTitle": "onMessage Nel caso in cui la chiamata ai metodi di ConversationsDAO non vada a buon fine, la funzione di callback deve essere chiamata con un solo parametro diverso da null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\nlistener.onMessage(event, context, callback);\ndone();\nconversations.addConversation.yield({ 'msg': 'error adding conversation' });\nexpect(callback.callCount).to.above(1);\nexpect(callback.getCall(0).args[0]).to.not.be.null;\nexpect(callback.getCall(0).args[1]).to.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "22ecbdd2-e85b-4695-bd0c-2a8d97a51537",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
      "fullTitle": "onMessage Nel caso in cui non ci siano errori, la funzione di callback deve essere chiamata con due parametri, il primo dei quali uguale a null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let context = { body: '' };\npromise.onCall(0).returns(Promise.resolve(JSON.stringify(rules_response)));\npromise.onCall(1).returns(Promise.resolve(JSON.stringify(notifications_response)));\nlistener.onMessage(event, context, callback);\ndone();\nguests.getGuest.yield(null, { 'type': 'example' });\nconversations.addConversation.yield(null, {});\nexpect(callback.callCount).to.equal(1);\nexpect(callback.getCall(0).args[0]).to.be.null;\nexpect(callback.getCall(0).args[1]).to.not.be.null;",
      "err": {},
      "isRoot": false,
      "uuid": "459505e4-3403-4fcb-8c5d-34125494bd74",
      "parentUUID": "0effac46-72e4-4729-8c20-ea1626ad93f7",
      "skipped": false
    },
    {
      "title": "Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
      "fullTitle": "query Se la richiesta HTTP ad api.ai va a buon fine allora lo status code della risposta deve essere uguale a 200.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.resolve(res_body));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\texpect(agents.getAgent.callCount).to.equal(1);\n\texpect(agents.getAgent.calledWith('test'));\n\tlet result = context.succeed.getCall(0).args[0];\n            expect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(200);\n            done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "226cf9e1-13b9-4856-a032-040122b5641b",
      "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
      "skipped": false
    },
    {
      "title": "Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
      "fullTitle": "query Se la chiamata al modulo VAModule genera un'errore, lo status code della risposta deve essere uguale al codice di errore ricevuto.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "agents.getAgent.returns(Rx.Observable.of('aaa'));\n          va.query.returns(Promise.reject(error));\n          service.query({ body: JSON.stringify(req_body) }, context);\nsetTimeout(function()\n{\n\texpect(context.succeed.callCount).to.equal(1);\n\tlet result = context.succeed.getCall(0).args[0];\n\texpect(result).to.not.be.null;\n\texpect(result.statusCode).to.equal(412);\n            done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9e8e83cb-5035-4258-8a63-7e375bf0da82",
      "parentUUID": "1452e88c-5d82-48e6-a29a-37bcfef2191c",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_addRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._addRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "29caa929-a0f0-4dde-b8c0-65472fc4cc40",
      "parentUUID": "9daec29c-268a-4c98-88ed-d54afc57c5b9",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_addUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._addUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9ec12e84-282b-4290-8c1d-08f49a54fd3a",
      "parentUUID": "9f7c5468-bd18-461e-aec0-24783382a75b",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_addUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.addEnrollment.returns(Rx.Observable.throw(errore));\napi._addUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "55d2c52c-f810-4ac8-ac11-a6cb50c8c8e2",
      "parentUUID": "db0e07f5-b977-44d4-bdfd-cfa75e777175",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getRule(5).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "66bcaf1d-f8e5-4520-a7dc-8ab14b474f47",
      "parentUUID": "b6a175e2-678e-438c-88ba-ea67fc2550de",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getRuleList Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getRuleList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c4da9def-8688-417c-9f3a-38db852bbf48",
      "parentUUID": "8623eed6-bd3a-408a-bdab-618a75deccec",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3bcc2dbc-0f81-45c2-bd2b-06227ec1a581",
      "parentUUID": "157be1f0-5ab2-4cb4-90d1-f99ffe481390",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_getUserList Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._getUserList().subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e03f0367-9493-4836-9fcc-fe7f2684c069",
      "parentUUID": "29bcb080-578d-44b7-9aa0-7ad7c49addfd",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
      "fullTitle": "_loginUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora la Promise deve essere rigettata.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.doLogin.returns(Rx.Observable.throw(errore));\napi._loginUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2cb6af96-dd0c-43f5-b2b7-4bc98907d069",
      "parentUUID": "6d144e37-05cd-4b1d-bd6a-af9caf5d6da2",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.add' allora il metodo deve chiamare il metodo privato _addRule.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "e9be47bb-b3a8-40d2-a705-9f34c224d4db",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.add' allora il metodo deve chiamare il metodo privato _addUser.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "0d2db1ce-12e6-423b-972b-919d74a62c27",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.addEnrollment' allora il metodo deve chiamare il metodo privato _addUserEnrollment.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "c17cffc9-cbb0-4262-a727-5e3883ebd21d",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.get' allora il metodo deve chiamare il metodo privato _getRule.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "0258c1f8-cc77-47eb-adb8-de39de1ed05e",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.getList' allora il metodo deve chiamare il metodo privato _getRuleList.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "7a71e6a7-3ef0-490e-96cb-82d6a0784c21",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.get' allora il metodo deve chiamare il metodo privato _getUser.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "ceb5e112-a980-4e35-9588-2de71d9e751d",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.getList' allora il metodo deve chiamare il metodo privato _getUserList.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUserList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUserList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUserList.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUserList.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "d0d6e44e-17fe-4e16-99d4-030961a873a7",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.remove' allora il metodo deve chiamare il metodo privato _removeRule.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "02528382-11e8-436f-a85a-883661b030ff",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.remove' allora il metodo deve chiamare il metodo privato _removeUser.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "d5a7ad63-3857-44ef-8e15-fcc681004fe2",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'rule.update' allora il metodo deve chiamare il metodo privato _updateRule.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateRule.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateRule.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "f5152a41-73c4-427a-86df-1264e6428b89",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.update' allora il metodo deve chiamare il metodo privato _updateUser.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "f6601963-6104-4bc6-acd0-d60c4db4978f",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _addRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n\texpect(api._addRule.callCount).to.equal(1);\n            done();\n          };\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "3920593b-60d8-4173-90c0-00fa78228d6d",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _addUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUser));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "fe586a9b-9cfb-47e5-8060-efe54dcc13b2",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _addUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._addUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_addUserEnrollment));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._addUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._addUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "179debc5-0ca0-411a-b89f-e6a063daea36",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\n          promise.onCall(0).returns(Promise.resolve(va_response_getRule));\n          promise.onCall(1).returns(Promise.resolve(empty_action_response));\n          api._getRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "c7d70b15-1a25-4000-a623-4adc4e0c8864",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getRuleList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "577517dd-c6b0-48e0-a430-b36a99b215f5",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "26702530-3986-48a5-8b1f-4337b93ff030",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _getUserList si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getRuleList = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_getRuleList));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._getRuleList.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._getRuleList.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "3e21f911-412e-4774-81f8-6a3f6ac81405",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _removeRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeRule = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeRule));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeRule.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeRule.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "0c621c18-c68d-4171-ad1b-cc81b59732b6",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _removeUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._removeUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_removeUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._removeUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._removeUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "62e5fe6d-ec9f-4f79-ad57-4563b2fcec3c",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _updateRule si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Rules.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "45163cfe-77e8-404f-a3f6-9e5d25852876",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _updateUser si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._updateUser.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "7940c317-be8f-4d95-adc6-4ecf313a3d69",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
      "fullTitle": "queryLambda Se lo status code della risposta di un microservizio è pari a 200 e l'action contenuta nel suo body non corrisponde a nessuna action supportata dal back-end allora il metodo deve rielabolare la risposta e inoltrarla.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._updateUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_updateUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._updateUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n\texpect(response).have.property('statusCode', 200);\n\tdone();\n};\napi.queryLambda(event, context);",
      "err": {},
      "isRoot": false,
      "uuid": "7d22f55f-8de9-411f-a188-5a3e159a15d3",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_removeRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._removeRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6164b5aa-cbe7-4b99-8de0-527c13c04dfb",
      "parentUUID": "7414a44c-cd25-4628-a939-b8c14ec206ef",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_removeUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._removeUser('mou').subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1366acd4-54ab-4fb3-b06b-7f7af4530b8b",
      "parentUUID": "b204672a-88dc-4d7d-8a82-525ff9f20f21",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_resetUserEnrollment Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "api._getUser = sinon.stub();\napi._getUser.returns(Rx.Observable.empty());\nvocalLogin.resetEnrollments.returns(Rx.Observable.throw(errore));\napi._resetUserEnrollment(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0f3e30dd-da36-4ce0-b853-a7c78f26117f",
      "parentUUID": "f7bbc907-3c7f-4875-bd3c-7368d7c20372",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_updateRule Se la risposta ricevuta dal microservizio Rules ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._updateRule(rule).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c008806e-3dae-4783-88c5-5108c410473c",
      "parentUUID": "3f7a4964-796c-49fc-949b-6b5497f0e3e4",
      "skipped": false
    },
    {
      "title": "Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "fullTitle": "_updateUser Se la risposta ricevuta dal microservizio Users ha uno status code diverso da 200 allora l'Observable ritornato deve chiamare il metodo error dell'Observer iscritto passandogli come parametro un oggetto di tipo Exception con campo code pari allo status code della risposta.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(errore));\napi._updateUser(user).subscribe(\n{\n\tnext: next,\n\terror: error,\n\tcomplete: complete\n});\nsetTimeout(function()\n{\n\texpect(error.callCount).to.equal(1);\n\texpect(error.getCall(0).args[0]).to.have.property('code', 500);\n\texpect(next.callCount).to.equal(0);\n\texpect(complete.callCount).to.equal(0);\n\tdone();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "af55b24f-0b28-4a2b-a729-614aabe5eab4",
      "parentUUID": "e0027bec-1f86-4e5a-b778-599fadef77be",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "addEnrollment Se la chiamata al servizio di Speaker Recognition per aggiungere un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.addEnrollment().subscribe(\n{\n  next: next,\n\t\t\t\t\t\terror: error,\n\t\t\t\t\t\tcomplete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});",
      "err": {},
      "isRoot": false,
      "uuid": "21d74ef5-bcff-4ec0-97b8-066355ba0025",
      "parentUUID": "22d0f8fc-99fc-4896-95d9-15117854e377",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
      "fullTitle": "createUser Se la chiamata al servizio di Speaker Recognition per creare un utente ritorna uno statusCode diverso da 200, StringObservable deve notificare lo StringObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.createUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "9b0cd785-4086-44e0-8471-507707ae5934",
      "parentUUID": "cd564caa-de06-4f4d-a345-925a55e76f54",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "deleteUser Se la chiamata al servizio di Speaker Recognition per eliminare un utente ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.deleteUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "46004f32-315f-4401-a645-01e1e64b87be",
      "parentUUID": "b44f757b-06f8-4809-bad4-5a91709f600c",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "doLogin Se la chiamata al servizio di Speaker Recognition per effettuare il login ritorna un oggetto con campo 'result' pari a 'Reject', l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject({ \"result\" : \"Reject\" }));\nmicrosoft_login.doLogin().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "115d1b30-517b-426a-a80c-b631e1a9cf59",
      "parentUUID": "ec7f4af6-7c21-4174-9b25-39b2ee2a2907",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "fullTitle": "getList Se la chiamata al servizio di Speaker Recognition per ottenere la lista degli utenti ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getList().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "4acf7496-49a4-4f64-abe5-a01a4bdf3966",
      "parentUUID": "87ae3466-151b-4856-831e-b19f3b57e4b6",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "fullTitle": "getUser Se la chiamata al servizio di Speaker Recognition per ottenere un utente ritorna uno statusCode diverso da 200, SRUserObservable deve notificare l'SRUserObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n  {\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.getUser().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "02556f8d-d023-4d71-bb9c-3b5e96aeb5c0",
      "parentUUID": "021dcfd3-efa1-4d09-a4f5-99e1e8770480",
      "skipped": false
    },
    {
      "title": "Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "fullTitle": "resetEnrollments Se la chiamata al servizio di Speaker Recognition per resettare un Enrollment ritorna uno statusCode diverso da 200, l'ErrorObservable deve notificare l'ErrorObserver chiamando il suo metodo error.",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "promise.returns(Promise.reject(\n{\n  \"error\" :\n  {\n    \"code\" : \"InternalServerError\",\n    \"message\" : \"SpeakerInvalid\"\n  }\n}));\nmicrosoft_login.resetEnrollments().subscribe(\n{\n  next: next,\n  error: error,\n  complete: complete\n});\nsetTimeout(function()\n\t\t\t\t\t{\t\n\t\t\t\t\t\texpect(next.callCount).to.equal(0);\n\t\t\t\t\t\texpect(complete.callCount).to.equal(0);\n\t\t\t\t\t\texpect(error.callCount).to.equal(1);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t})",
      "err": {},
      "isRoot": false,
      "uuid": "a3e78da8-834c-433e-b156-03a4b4aa5a05",
      "parentUUID": "dab3d1f9-ee78-4886-85c5-61147dc1fcb1",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
      "fullTitle": "webhook La risposte dovrebbe avere il campo statusCode impostato a 200 nel caso in cui venga passato un JWT corretto.",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "jwt.verify.returns(1);\nservice.webhook(ev, { succeed: function(res) { expect(res.statusCode).to.equal(200); done(); }});",
      "err": {
        "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:72:17)\n"
      },
      "isRoot": false,
      "uuid": "2d5a2027-bd8a-4eea-b514-7611333dc194",
      "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
      "skipped": false
    },
    {
      "title": "La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
      "fullTitle": "webhook La risposta dovrebbe avere il campo statusCode impostato a 403 nel caso in cui la richiesta contenga un JWT non valido.",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "jwt.verify.throws();\nservice.webhook(ev, { succeed: function(res)\n{\n  let body = JSON.parse(res.body);\n  expect(body.data._status).to.equal(403);\n  done();\n}});",
      "err": {
        "estack": "TypeError: service.webhook is not a function\n  at Context.<anonymous> (src\\test\\test_AdministrationWebhookService.js:78:17)\n"
      },
      "isRoot": false,
      "uuid": "47923f23-8044-4ac7-84a5-5aa854f730e5",
      "parentUUID": "16aae3bd-d389-4ce8-be37-12bb842af39e",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.login' allora il metodo deve chiamare il metodo privato _loginUser.",
      "timedOut": true,
      "duration": 2000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api._loginUser = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_loginUser));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._loginUser.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._loginUser.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
      },
      "isRoot": false,
      "uuid": "eee55e6f-64f1-4cf9-b5c3-2a93ce2c937c",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
      "fullTitle": "queryLambda Se l'action del body della risposta è uguale a 'user.resetEnrollment' allora il metodo deve chiamare il metodo privato _resetUserEnrollment.",
      "timedOut": true,
      "duration": 2000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.empty());\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
      },
      "isRoot": false,
      "uuid": "50564916-2705-43b7-b023-723f28e84fca",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    },
    {
      "title": "Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "fullTitle": "queryLambda Se durante la chiamata al metodo privato _resetUserEnrollment si verifica un errore allora il metodo deve chiamare il metodo succeed del context con un parametro LambdaResponse il quale campo statusCode è impostato ad un valore uguale a quello restituito dal microservizio Users.",
      "timedOut": true,
      "duration": 2001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "api._resetUserEnrollment = sinon.stub();\nstt.speechToText.returns(Promise.resolve('Test'));\npromise.onCall(0).returns(Promise.resolve(va_response_userResetEnrollment));\npromise.onCall(1).returns(Promise.resolve(empty_action_response));\napi._resetUserEnrollment.returns(Rx.Observable.throw(errore_microservizio));\ncontext.succeed = function(response)\n          {\n            //controllo che i campi non siano nulli, quindi chiamo done\n\texpect(api._resetUserEnrollment.callCount).to.equal(1);\n\texpect(response).to.have.property('statusCode', errore_microservizio.code);\n\texpect(response).to.have.property('body', JSON.stringify({ message: errore_microservizio.msg }));\n            done();\n          }\n          api.queryLambda(event, context);",
      "err": {
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n"
      },
      "isRoot": false,
      "uuid": "c0ac97e5-01a4-459e-bf68-0ffb06b44d76",
      "parentUUID": "960fde6e-3680-401d-9d9a-f60f2aa9d196",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}