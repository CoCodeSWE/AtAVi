export var ConversationApp = {
  "setup": "class ConversationView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\n      \"ul\",\n      { id: \"listMessages\" },\n      this.props.msgs.map((msg, index) => React.createElement(\n        \"li\",\n        { key: index, \"data-sender\": msg.sender },\n        msg.text\n      ))\n    );\n  }\n}\n//# sourceMappingURL=ConversationView.js.map\nclass MsgStore\n{\n  constructor()\n  {\n    this.msgs = [];\n    this.subject = new Rx.Subject();\n  }\n\n  getObservable()\n  {\n    return this.subject.asObservable();\n  }\n\n  onCmd(action)\n  {\n    switch(action.cmd)\n    {\n      case 'displayMsgs':\n        action.params.forEach((msg) => this.msgs.push(msg));\n        //this.msgs.push({text: action.params[0], sender:0}, {text: action.params[1], sender:1});\n        break;\n      case 'clear':\n        this._onClear();\n        break;\n      case 'sendMsg':\n        this.msgs.push({text: action.params[0], sender:0});\n        console.log(\"asdadada\");\n        break;\n      case 'receiveMsg':\n        this.msgs.push({text: action.params[0], sender:1});\n        break;\n      default: return;\n    }\n    this.subject.next();\n  }\n\n  _onClear()\n  {\n    this.msgs = [];\n  }\n\n}\n/**\n* @desc Questa classe si occupa di gestire il cambio delle applicazioni nel client.\n* @author Mauro Carlin\n* @version 0.0.4\n* @since 0.0.3-alpha\n*/\nclass Dispatcher\n{\n  constructor() {\n    this.subject = new Rx.Subject();\n  }\n\n  getObservable()\n  {\n    return this.subject.asObservable();\n  }\n\n  dispatch(cmd, params)\n  {\n    this.subject.next({ cmd: cmd, params: params });\n  }\n}\nthis.store = new MsgStore();\nthis.dispatcher = new Dispatcher();\nvar _this = this;\nfunction render() {\n  ReactDOM.render(React.createElement(ConversationView, _this.store), _this.ui);\n}\n\nthis.store.getObservable().subscribe({\n  next: render,\n  error: console.log,\n  complete: () => console.log('completed')\n});\n\nthis.dispatcher.getObservable().subscribe({\n  next: data => _this.store.onCmd(data),\n  error: console.log\n});\n\nrender();\n//# sourceMappingURL=Container.js.map\n//# sourceMappingURL=Container.js.map\n",
  "libs": [
    "https://unpkg.com/react@15/dist/react.js",
    "https://unpkg.com/react-dom@15/dist/react-dom.js",
    "https://unpkg.com/rxjs/bundles/Rx.min.js"
  ],
  "ui": "",
  "cmdHandler": "let msg = [{sender: 0, text: params.text_request}, {sender: 1, text: params.text_response}];\nthis.dispatcher.dispatch(cmd, msg)\n",
  "name": "conversation"
}