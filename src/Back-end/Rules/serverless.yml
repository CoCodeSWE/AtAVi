service: rules

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  environment:
    RULES_TABLE: Rules-${opt:stage, self:provider.stage}
    TASKS_TABLE: Tasks-${opt:stage, self:provider.stage}
  profile: default
  apiKeys:
    - rules-service
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RULES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}"

functions:
  addRule:
    handler: addRule.addRule
    events:
      - http:
          path: rules
          method: post
          private: true

  deleteRule:
    handler: deleteRule.deleteRule
    events:
      - http:
          path: rules/{name}
          method: delete
          private: true
          request:
            parameters:
              paths:
                name: true

  getRule:
    handler: getRule.getRule
    events:
      - http:
          path: rules/{name}
          method: get
          private: true
          request:
            parameters:
              paths:
                name: true

  getRuleList:
    handler: getRuleList.getRuleList
    events:
      - http:
          path: rules
          method: get
          private: true
          request:
            parameters:
              querystring:
                enabled: false
                name: false
                target: false
                task: false

  getTaskList:
    handler: getTaskList.getTaskList
    events:
      - http:
          path: rules/tasks
          method: get
          private: true

  updateRule:
    handler: updateRule.updateRule
    events:
      - http:
          path: rules/{name}
          method: put
          private: true
          request:
            parameters:
              paths:
                name: true

resources:
  Resources:
    rulesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RULES_TABLE}
        AttributeDefinitions:
          - AttributeName: rule_name
            AttributeType: S
        KeySchema:
          - AttributeName: rule_name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
