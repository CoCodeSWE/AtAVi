# Welcome to Serverless!
#

service: sns-message-listener

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  profile: default
  environment:
    RULES_SERVICE_URL: ${file(secret.yml):rules.url}
    RULES_SERVICE_KEY: ${file(secret.yml):rules.key}
    NOTIFICATIONS_SERVICE_URL: ${file(secret.yml):notifications.url}
    NOTIFICATIONS_SERVICE_KEY: ${file(secret.yml):notifications.key}
    DEFAULT_CHANNEL: ${file(secret.yml):notifications.default_channel}
    CONVERSATIONS_TABLE: Conversations-${opt:stage, self:provider.stage}
    GUESTS_TABLE: Guests-${opt:stage, self:provider.stage}  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONVERSATIONS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GUESTS_TABLE}"  
functions:
  notify:
    handler: handler.notify
    events:
      - sns: ${file(secret.yml):sns.arn}
  saveConvesation:
    handler: handler.saveConvesation
    events:
      - sns: ${file(secret.yml):sns.arn}
  updateGuest:
    handler: handler.updateGuest
    events:
      - sns: ${file(secret.yml):sns.arn}
